struct FaceData
{
    name : const string;
    value : u32 = 0;
};

enum face_kind : FaceData
{
    ace = {"A",1},
    two = {"2",2},
    three = {"3",3},
    four = {"4",4},
    five = {"5",5},
    six = {"6",6},
    seven = {"7",7},
    eight = {"8",8},
    nine = {"9",9},
    ten = {"10",10},
    jack = {"J",10},
    king = {"K",10},
    queen = {"Q",10},
};

struct SuitData
{
    name : c8;
};

enum suit_kind : SuitData
{
    club = {'C'},
    diamond = {'D'},
    heart = {'H'},
    spade = {'S'},
}; 

struct Card
{
    suit : suit_kind;
    face : face_kind;
};


func print_card(card : const Card@)
{
    std::print("{}:{} ",card.suit.name,card.face.name);
}

struct Hand
{
    // 14 is max before bust
    card : Card[14] = {?};
    count : u32;

    stand : bool;

    // value caching
    ace_count : u32;
    value_soft : u32;
    value : u32;
};

struct Deck
{
    card : Card[52] = {?};
    dealt : u32;
};


func init_deck(deck : const Deck@)
{
    for(s in 0 < suit_kind.len)
    {
        for(f in 0 < face_kind.len)
        {
            idx := (s * face_kind.len) + f;
            deck.card[idx].suit = cast(suit_kind,s);
            deck.card[idx].face = cast(face_kind,f);
        }
    }
}

func shuffle_deck(deck : const Deck@)
{
    for(i in deck.card.len - 1 > 0)
    {
        idx := std::rand_range_u64(0,cast(u32,i)); 

        tmp := deck.card[i];
        deck.card[i] = deck.card[idx];
        deck.card[idx] = tmp;
    }
}

func print_deck(deck : const Deck@)
{
    std::print("deck: \n");

    for(@card in deck.card)
    {
        print_card(card);
    }

    std::linefeed();
}

func print_hand(hand : const Hand@, name : const string)
{
    std::print("{}: ",name);

    for(@card in hand.card[:hand.count])
    {
        print_card(card);
    }
    
    std::print("value: {}\n",hand.value);
}

func value_hand(hand : Hand@)
{
    // use soft value as a base
    value : u32 = hand.value_soft;

    // keep adding hard value of aces
    // until we are at a limit or out of aces
    ace_count := hand.ace_count;

    while(value <= 11 && ace_count != 0)
    {
        value += 10;
        ace_count -= 1;
    }

    // finally recache the value
    hand.value = value;
}

func deal_card(deck : Deck@, hand : Hand@)
{
    // player is stood dont deal any more cards
    if(hand.stand)
    {
        return;
    }

    // dealt every card, re roll the deck
    if(deck.dealt == deck.card.len)
    {
        shuffle_deck(deck);
        deck.dealt = 0;
    }

    // deal into hand
    hand.card[hand.count] = deck.card[deck.dealt];
    hand.count += 1;

    // cache soft value and ace count
    // so we can procure the value of hand easily
    card := &deck.card[deck.dealt];

    hand.value_soft += card.face.value;

    if(card.face == face_kind::ace)
    {
        hand.ace_count += 1;
    }
    
    value_hand(hand);

    // take it out of the deck
    deck.dealt += 1;
}