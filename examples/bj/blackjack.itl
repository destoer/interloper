
import "card"

struct Blackjack
{
    deck : Deck = {?};

    player : Hand = {?};
    dealer : Hand = {?};

    blackjack : bool;
};

func make_blackjack() Blackjack
{
    bj : Blackjack;

    init_deck(&bj.deck);
    shuffle_deck(&bj.deck);

    // deal initial cards on both hands
    deal_card(&bj.deck,&bj.player);
    deal_card(&bj.deck,&bj.player);

    deal_card(&bj.deck,&bj.dealer);
    deal_card(&bj.deck,&bj.dealer);

    // dealer may start the game stood
    bj.dealer.stand = value_hand(&bj.dealer) >= DEALER_STAND;    

    return bj;
}

func deal_until_stand(deck : Deck@,dealer : Hand@)
{
    // deal cards until dealer is stood
    while(!dealer.stand)
    {
        deal_card(deck,dealer);
        dealer.stand = value_hand(dealer) >= DEALER_STAND;
    }    
}


constant DEALER_STAND : u32 = 17;

func play_round()
{
    bj := make_blackjack();

    // check for blackjack!
    bj.blackjack = value_hand(&bj.player) == 21 || value_hand(&bj.dealer) == 21;

    // game is instantly over if a player got blackjack
    done := bj.blackjack;

    if(value_hand(&bj.player) == 21)
    {
        print("Blackjack!\n");
    }

    user_input : c8[256] = {?};

    while(!done)
    {
        // show the dealer hand
        print("Dealer: ");

        print_card(&bj.dealer.card[0]);

        // only first card shown
        for(i : u32 = 0; i < bj.dealer.count - 1; i += 1)
        {
            print("? ");
        }
        linefeed();


        // show the player hand
        print_hand(&bj.player,"Player");

        // hit or stand?
        print("Stand?: ");
        out := read_string(user_input);

        // player stand, game will end
        if(out[0] == 'y')
        {
            print("Player stood\n");

            bj.player.stand = true;

            // deal cards until dealer is stood
            deal_until_stand(&bj.deck,&bj.dealer);

            done = true;
        }
        
        // check end game states
        else
        {
            // deal new round of cards
            deal_card(&bj.deck,&bj.player);
            deal_card(&bj.deck,&bj.dealer);

            player_value := value_hand(&bj.player);
            dealer_value := value_hand(&bj.dealer);

            // if dealer has hit over their limit they must stand
            bj.dealer.stand = dealer_value >= DEALER_STAND;

            // check win cond
            // if any player has a blackjack or a bust 
            // or if both players are stood the game is over
            if((player_value >= 21 || dealer_value >= 21) || (bj.player.stand && bj.dealer.stand))
            {
                done = true;

                // make sure dealer has been dealth every card
                deal_until_stand(&bj.deck,&bj.dealer);
            }
        }

        // seperate each deal
        linefeed();
    }

    print("Round over:\n");

    // show final set of cards
    print_hand(&bj.player,"Player");
    print_hand(&bj.dealer,"Dealer");

    // print the win state

    // cache these values now they are final
    // to make the win calc easier
    player_value := value_hand(&bj.player);
    dealer_value := value_hand(&bj.dealer);

    // draw
    if(player_value == dealer_value)
    {
        print("Push!\n");
    }

    // if both player's bust the dealer still wins
    else if(player_value > 21 && dealer_value > 21)
    {
        print("Player busted\n");
    }

    // check invidivual busts
    else if(player_value > 21)
    {
        print("Player busted!\n");
    }

    else if(dealer_value > 21)
    {
        print("Dealer busted!\n");
    }

    // all other states have been accounted for
    // highest value wins
    else if(dealer_value > player_value)
    {
        print("Dealer wins\n");
    }

    else
    {
        print("Player wins!\n");
    }
}

func play_blackjack()
{
    done := false;

    user_input : c8[256] = {?};

    while(!done)
    {
        play_round();

        print("continue playing?: ");
        out := read_string(user_input);

        // player stand
        done = out[0] == 'n';

        linefeed();
    }
}