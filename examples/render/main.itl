
import <graphics> 
import <colour>

// https://github.com/ssloy/tinyrenderer/wiki/Lesson-1:-Bresenham%E2%80%99s-Line-Drawing-Algorithm

func draw_line(win: gfx::Window@, v1: std::Vec2I@, v2: std::Vec2I@, colour: u32)
{
    v1_clamp := std::vec2i_clamp_zero(v1,&win.bounds);
    v2_clamp := std::vec2i_clamp_zero(v2,&win.bounds);

    y1 := (win.size.y - v1_clamp.y);
    y2 := (win.size.y - v2_clamp.y);
    x1 := v1_clamp.x;
    x2 := v2_clamp.x;

    steep := false;

    // Draw more x than y
    if std::abs(x1 - x2) < std::abs(y1 - y2)
    {
        std::swap_s64(&x1,&y1);
        std::swap_s64(&x2,&y2);
        steep = true;
    }

    // x1 should be smallest 
    if x1 > x2 
    {
        std::swap_s64(&x1,&x2);
        std::swap_s64(&y1,&y2);
    }

    stride := win.size.x;

    y1f := cast(f64,y1);
    y2f := cast(f64,y2);

    for x in x1 < x2 + 1
    {
        t := cast(f64,x - x1) / cast(f64,x2 - x1);
        y := cast(s64,y1f * (1.0 - t) + (y2f * t));

        if steep
        {
            win.screen[(x * stride) + y] = colour;
        }

        else
        {
            win.screen[(y * stride) + x] = colour;
        }
    }
}

func draw_triangle(win: gfx::Window@, tri: std::Vec2I[3], colour: u32)
{
    draw_line(win,&tri[0],&tri[1],colour);
    draw_line(win,&tri[1],&tri[2],colour);
    draw_line(win,&tri[2],&tri[0],colour); 
}

func render(win: gfx::Window@)
{
    gfx::blank_screen(win.screen);

    tri1: std::Vec2I[3] = {{10, 70},   {50, 160},  {70, 80}}; 
    tri2: std::Vec2I[3] = {{180, 50},  {150, 1},   {70, 180}}; 
    tri3: std::Vec2I[3] = {{180, 150}, {120, 160}, {130, 180}}; 

    draw_triangle(win,tri1, RED); 
    draw_triangle(win,tri2, BLUE); 
    draw_triangle(win,tri3, GREEN);
}

func main() s32
{
    SCREEN_X := 640;
    SCREEN_Y := 480;

    [win, res] := gfx::open_window("interloper",SCREEN_X,SCREEN_Y);

    if(res != gfx::win_result::ok)
    {
        return -1;
    }

    while(!win.quit)
    {
        if(gfx::start_frame(&win) == gfx::win_result::err)
        {
            log::error("Render","Failed to start frame");
            return -1;
        }
    
        if(input::is_pressed(&win.input,input::button_t::start))
        {
            win.quit = true;
            log::info("Render","Quitting");
        }


        render(&win);

        if(gfx::draw_window(&win,win.screen) == gfx::win_result::err)
        {
            log::error("Render","Failed to draw window");
            return -1;
        }

        gfx::end_frame(&win);
    }

    if(gfx::close_window(&win) == gfx::win_result::err)
    {
        log::error("Render","Failed to close window");
        return -1;
    }

    return 0;
}