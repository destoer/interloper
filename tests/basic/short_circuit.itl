

func never_run(exit_code: s32) bool
{
    std::exit(exit_code);
    return true;
}

func and_cont(set: bool@) bool
{
    @set = true;

    return true;
}

func and_end(set: bool@) bool
{
    @set = true;

    return false;
}

func or_cont(set: bool@) bool
{
    @set = true;

    return false;
}

func or_end(set: bool@) bool
{
    @set = true;

    return true;
}

func main() s32 
{
    ran: bool[32];

    res1 := and_end(&ran[0]) && never_run(1);
    res2 := or_end(&ran[1]) || never_run(2);
    res3 := and_cont(&ran[2]) && and_cont(&ran[3]) && and_end(&ran[4]) && never_run(3);
    res4 := or_cont(&ran[5]) || or_cont(&ran[6]) || or_end(&ran[7]) || never_run(4);
    res5 := or_cont(&ran[8]) || (and_end(&ran[9]) && never_run(5));
    res6 := (and_end(&ran[10]) && never_run(6) && never_run(7)) || (and_cont(&ran[11]) && and_cont(&ran[12]) && and_cont(&ran[13]));
    res7 := (or_end(&ran[14]) || never_run(9) || never_run(10)) && (and_end(&ran[15]) && never_run(11));
    res8 := (and_cont(&ran[16]) && and_cont(&ran[17]) && and_cont(&ran[18])) || (never_run(14) && never_run(15) && never_run(16));

    ans := !res1 && res2 && !res3 && res4 && !res5 && res6 && res7 && res8;
 
    while(and_end(&ran[19]) && never_run(17))
    {
        std::exit(12);
    }

    for(i : u32 = 0; and_end(&ran[20]) && never_run(18); i += 1)
    {
        std::exit(13);
    }

    if(and_end(&ran[21]) && never_run(19))
    {
        std::exit(14);
    }

    else
    {

    }

    // Check our statements actually executed
    for(i in 0 < 22)
    {
        if(!ran[i])
        {
            std::exit(30 + i);
        }
    }


    if(ans)
    {
        return 50;
    }

    return 60;
}