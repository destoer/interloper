// expected one

func is_positive(x : s32) bool
{
    // comparision with zero works regardless of sign
    return !(x < 0);
}

func is_eq(x: s32, y: s32) bool
{
    return x == y;
}

func not_eq(x: s32, y: s32) bool
{
    return x != y;
}

func is_sgt(x: s32, y: s32) bool
{
    return x > y;
}

func is_sge(x: s32, y: s32) bool
{
    return x >= y;
}

func is_slt(x: s32, y: s32) bool
{
    return x < y;
}

func is_sle(x: s32, y: s32) bool
{
    return x <= y;
}


func is_ugt(x: u32, y: u32) bool
{
    return x > y;
}

func is_uge(x: u32, y: u32) bool
{
    return x >= y;
}

func is_ult(x: u32, y: u32) bool
{
    return x < y;
}

func is_ule(x: u32, y: u32) bool
{
    return x <= y;
}



func main() s32
{
    res1 := is_positive(cast(s32,false)) && !is_positive(-1) && is_eq(5,5) && !is_eq(0,5);
    res2 := is_sgt(5, 2) && !is_sgt(5,10) && is_slt(1,7) && !is_slt(500,15);

    res3 := is_sle(5,5) && is_sle(4,5) && !is_sle(6,5) && is_sge(5,5) && is_sge(6,5);
    res4 := !is_sge(4,5) && not_eq(5,4) && !not_eq(5,5); 

    res5 := !is_uge(7,10) && is_uge(10,10) && !is_ugt(10,10) && is_ugt(50,20); 
    res6 :=  is_ule(5,5) && !is_ule(25,3) && is_ult(0,100) && !is_ult(1000,7); 

    // anyything less than one is false
    // eq to < 1
    or := true || cast(bool,-1);

    v := 0;
    
    res := or && res1 && res2 && res3 && res4 && res5 && res6 && !v;

    // false is 0 and 1 is true
    return cast(s32,res);
}