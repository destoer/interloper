
func divide(v1: u32, v2: u32) (s32,bool)
{
    if(v2 != 0)
    {
        return v1 / v2,false;
    }

    return 0, true;
}

func numbers() (s32,s32)
{
    return 5, 10;
}


func basic() bool
{
    x : u32 = 5;
    err : bool = false;

    // basic 
    [x, err] = divide(1,0);

    if(err && x == 0)
    {
        [x, err] = divide(30,2);

        return !err && x == 15;
    }

    return false;
}




struct Point
{
    x : s32;
    y : s32;
}

func structure() bool
{
    point : Point;

    [point.x, point.y] = numbers();

    return point.x == 5 && point.y == 10;
}



func array() bool
{
    arr : u32[2];

    [arr[1], arr[0]] = numbers();

    return arr[0] == 10 && arr[1] == 5;
}


func pointer() bool
{
    x : u32 = 0;
    y : u32 = 0;

    ptr : u32@ = &x;

    [@ptr, y] = numbers();

    return x == 5 && y == 10;
}

// expected 1
func main() s32 
{ 
    test1 : bool = basic();

    test2 : bool = structure();

    test3 : bool = array();

    test4 : bool = pointer();

    // every test passed?
    pass : bool = test1 && test2 && test3;

    return cast(s32,pass);
}