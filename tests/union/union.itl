
struct StringToken 
{
    str: const string;
}

struct Value 
{
    value: u32;
}


// Conceptually this is destructured into

/*
enum token_type
{
    string,
    integer,
}

struct Token
{
    value: Value | StringToken
    type: token_type
}
*/

union Token : token_type  
{
    string: StringToken,
    integer: Value,    
}

func main() s32 {

    token := Token { value: Value { 5 } };

    res1 := token.type == token_type::integer;
    res2 := token.integer.value == 5;

    token = Token { string: StringToken{ "Hello World" } }
    res3 := token.type == token_type::string;
    res4 := strequal(token.string.str,"Hello World");

    // res5 := false;

    // switch(token) 
    // {
    //     case token_type::integer:
    //     {
    //         return 2;
    //     }

    //     case token_type::string:
    //     {
    //         res5 = true;
    //     }

    //     default: 
    //     {
    //         return 3; 
    //     }
    // }

    ans := res1 && res2 && res3 && res4;

    return cast(s32,ans);
}