

func test_arena() bool
{
    buf : byte[1024];
    arena : Arena = make_arena(buf);

    vla : byte[] = byte_arr_arena(&arena,25);

    for [@v , i] in vla
    {
        @v = cast(byte,i);
    }

    res := vla.len * vla[3];

    return res == 75;
}

func test_heap() bool
{
    print("before alloc:\n");
    heap_usage(&global_heap);


    vla : byte[] = byte_arr_heap(&global_heap,25);

    print("after alloc:\n");
    heap_usage(&global_heap);

    for [@v , i] in vla
    {
        @v = cast(byte,i * 2);
    }

    res := vla.len * vla[3];

    destroy_arr_heap<byte>(&global_heap,&vla);
    
    print("after free:\n");
    heap_usage(&global_heap);

    // check data is also free
    return res == 150 && vla.data == NULL && vla.len == 0;
}

func test_realloc() bool
{
    vla : byte[];
    array_realloc<byte>(&global_heap,&vla,100);

    for(i in 0 < 5)
    {
        array_realloc<byte>(&global_heap,&vla,vla.len * 2);

        for([@v , j] in vla)
        {
            @v = cast(byte,j);
        }

        print("alloc round {}\n",i);
        heap_usage(&global_heap);
    }

    res := vla.len;

    destroy_arr_heap<byte>(&global_heap,&vla);

    return res == 3200;
}

func stress_heap() bool
{
    arr : byte[10]@;

    for(@ptr in arr)
    {
        @ptr = alloc_heap(&global_heap,1,55);
    }

    pattern : u32[?] = 
    {
        0,2,3,4,5,7,2,1,8,9,5,6,6,2,1,9,8,3,4,0
    };

    for(i in pattern)
    {
        if(arr[i])
        {
            free_heap(&global_heap,&arr[i]);
        }

        else
        {
            arr[i] = alloc_heap(&global_heap,1,i);
        }
    }

    for(@ptr in arr)
    {
        free_heap(&global_heap,ptr);
    }

    heap_usage(&global_heap);
    return global_heap.used == 0;
}

func main() s32
{
    pass := test_arena() && test_heap() && test_realloc() && stress_heap();

    return cast(s32,pass);
}