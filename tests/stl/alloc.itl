

func test_arena() bool
{
    buf : byte[1024];
    arena : Arena = make_arena(buf);

    vla : byte[] = byte_array_arena(&arena,25);

    for [@v , i] in vla
    {
        @v = cast(byte,i);
    }

    res := vla.len * vla[3];

    return res == 75;
}

func test_heap() bool
{
    print("before alloc:\n");
    heap_usage(&global_heap);


    vla : byte[] = byte_array_heap(&global_heap,25);

    print("after alloc:\n");
    heap_usage(&global_heap);

    for [@v , i] in vla
    {
        @v = cast(byte,i * 2);
    }

    res := vla.len * vla[3];

    free_heap(&global_heap,&vla.data);
    
    print("after free:\n");
    heap_usage(&global_heap);

    // check data is also free
    return res == 150 && vla.data == NULL;
}

func main() s32
{
    pass := test_arena() && test_heap();

    return cast(s32,pass);
}