
// check passed type is what is expected for passed value..

func check_builtin_type(any : Any, expected : builtin_type) bool
{
    type : const Type@ = any.type;

    if(is_builtin(type.type_idx))
    {
        decl actual = cast(builtin_type,type.type_idx);
        return actual == expected;
    }

    return false;
}

func check_builtin() bool
{
    res1 : bool = check_builtin_type(cast(u32,1),builtin_type::u32_t);
    res2 : bool = check_builtin_type(cast(u16,2),builtin_type::u16_t);
    res3 : bool = check_builtin_type(cast(u8,3),builtin_type::u8_t);

    res4 : bool = check_builtin_type(cast(s32,4),builtin_type::s32_t);
    res5 : bool = check_builtin_type(cast(s16,5),builtin_type::s16_t);
    res6 : bool = check_builtin_type(cast(s8,6),builtin_type::s8_t);

    res7 : bool = check_builtin_type(cast(byte,7),builtin_type::byte_t);

    res8 : bool = check_builtin_type(true,builtin_type::bool_t);

    // not equal
    res9 : bool = !check_builtin_type(true,builtin_type::u32_t);
    
    // did every test pass?
    res : bool = res1 && res2 && res3 && res4 && res5 && res6 && res7 && res8 && res9;

    return res;
}

/*
func check_ptr(any : Any, expected : builtin_type) bool
{
    return true;
}

func check_pointer() bool
{
    x : u32 = 5;
    ptr : u32@  = &x;

    res1 : bool = check_ptr(ptr,builtin_type::u32_t);

    res : bool = res1;

    return res;
}
*/

func main() s32
{
    res1 : bool = check_builtin();
    //res2 : bool = check_pointer();

    decl res = res1;

    ans : s32 = cast(u32,res);

    return ans;
}