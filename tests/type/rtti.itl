
// check passed type is what is expected for passed value..

func check_builtin_type(any : Any, expected : itl_type) bool
{
    type := any.type;

    if(std::is_builtin(type.type_idx))
    {
        return type.type_idx == expected;
    }

    return false;
}

func check_builtin() bool
{
    res1 := check_builtin_type(cast(u32,1),itl_type::u32_t);
    res2 := check_builtin_type(cast(u16,2),itl_type::u16_t);
    res3 := check_builtin_type(cast(u8,3),itl_type::u8_t);

    res4 := check_builtin_type(cast(s32,4),itl_type::s32_t);
    res5 := check_builtin_type(cast(s16,5),itl_type::s16_t);
    res6 := check_builtin_type(cast(s8,6),itl_type::s8_t);

    res7 := check_builtin_type(cast(byte,7),itl_type::byte_t);

    res8 := check_builtin_type(true,itl_type::bool_t);

    // not equal
    res9 := !check_builtin_type(true,itl_type::u32_t);
    
    // 64 bit
    res10 := check_builtin_type(cast(u64,0xffff_ffff_dead_beef),itl_type::u64_t);
    res11 := check_builtin_type(cast(s64,0xffff_ffff_cafe_babe),itl_type::s64_t);

    // did every test pass?
    res := res1 && res2 && res3 && res4 && res5 && res6 && res7 && res8 && res9 && res10 && res11;

    return res;
}


func check_ptr(any : Any, expected : itl_type) bool
{
    type := any.type;

    if(std::is_pointer(type))
    {
        contained_type := std::deref_pointer(type);

        return expected == contained_type.type_idx;
    }

    return false;
}

func check_pointer() bool
{
    x : u32 = 5;
    ptr : u32@  = &x;

    y : s32 = 5;
    ptr_false : s32@ = &y;

    res1 := check_ptr(ptr,itl_type::u32_t);
    res2 := !check_ptr(ptr_false,itl_type::u32_t);

    res := res1 && res2;

    return res;
}

func test_array(any : Any, expected_len : u32) bool
{
    type : const Type@ = any.type;

    if(std::is_array(type))
    {
        array_type := cast(const ArrayType@,type);

        return array_type.size == expected_len;
    }

    return false;
}

func check_array() bool
{
    arr : u32[?] = {1,2,3,4,5};

    res1 := test_array(arr,arr.len);

    // not an array fail
    res2 := !test_array(5,0);

    res := res1 && res2;

    return res;
}

func main() s32
{
    res1 := check_builtin();
    res2 := check_pointer();
    res3 := check_array();

    res := res1 && res2 && res3;

    ans : s32 = cast(u32,res);

    return ans;
}