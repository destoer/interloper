

func largest<T>(v1: T, v2: T) T
{
    if(v1 > v2)
    {
        return v1;
    }

    return v2;
}

func largest_u64(v1: u64, v2: u64) u64
{
    return largest<u64>(v1,v2);
}

func largest_s64(v1: s64, v2: s64) s64
{
    return largest<s64>(v1,v2);
}

// should get back 6
func add_nest<T>(v: T) T
{
    return cast(s8,5 + largest<s64>(sizeof_type(T),1));
}

// expected 28

func main() s32
{
    ans := add_nest<s8>(1) + largest_u64(5,25) + largest_s64(-5,3);

    return cast(s32,ans);
}