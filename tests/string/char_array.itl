
// expected 7

// TODO: make a proper alias for char, even though we dont want care about it being strongly type checked
func u8 to_lower(u8 char)
{
    if(char >= 'A' && char <= 'Z')
    {
        char -= 0x20;
    }

    return char;
}


// TODO: these need to go in as imports when we impl them!
func bool is_set(u32 v, u32 bit)
{
    return cast(bool,(v >> bit) & 1);
}


func u32 hamming_weight(u32 set)
{
    u32 sum = 0;

    // TODO: add way to query internal type limits
    for(u32 i = 0; i < 32; i += 1)
    {
        sum += cast(u32,is_set(set,i));
    }

    return sum;
}

func u32 set_bit(u32 v, u32 bit)
{
    return v | (1 << bit);
}


func s32 main()
{
    u8[?] str = "Hello there";

    u32 set = 0;

    for(u32 i = 0; i < str.len; i += 1)
    {
        str[i] = to_lower(str[i]);

        u8 x = str[i] - 'a';

        set = set_bit(set,x);
    }

    return hamming_weight(set);
}