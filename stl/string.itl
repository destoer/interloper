namespace std;

constant ASCII_CASE_GAP : u8 = 'a' - 'A';

func to_lower(char: c8) c8
{
    if(char >= 'A' && char <= 'Z')
    {
        char -= ASCII_CASE_GAP;
    }

    return char;
}

// if printed in base 2, its 64 bits
constant MAX_INT_CHARS : u32 = 64;

func clip_str(str : string, len : usize) string
{
    buf: string = {str.data,len};

    return buf;
}

func str_copy(dst: string,src: const string) usize
{
    size := min_u64(src.len,dst.len);

    memcpy(dst.data,src.data,size);

    return size;
}

// null terminate the string after copy
func str_copy_term(dst: string,src: const string) usize
{
    size := str_copy(dst,src);

    if(size != 0)
    {
        term_pos := min_u64(size,dst.len - 1);
        dst[term_pos] = '\0';
    }

    return size;
}

func swap_c8(v1 : c8@, v2 : c8@)
{
    tmp := @v1;
    @v1 = @v2;
    @v2 = tmp;
}

func reverse_str(str : string, len : usize)
{
    for(i in 0 < len / 2)
    {
        swap_c8(&str[i],&str[len - i - 1]);
    }
}

struct Value
{
    v : u64;
    sign : bool;
};

func str_valid(str : const string) bool
{
    return str.len != 0 && str.data != NULL;
}

func is_alpha(c : c8) bool
{
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}

// where it left off along with value
func parse_value(str : const string) [Value, const string]
{
    value : Value;
    data := str.data;
    end := str.data + str.len;

    // empty string
    if(!str_valid(str))
    {
        return value, str; 
    }

    if(str[0] == '-')
    {
        data += 1;
        value.sign = true; 
    }

    done := false;

    while(!done)
    {
        if(data == end)
        {
            done = true;
        }

        else
        {
            c := @data;

            v : u32 = 0;

            if(c >= '0' && c <= '9')
            {
                v = c - '0';
            }

            else
            {
                // letters terminate
                done  = true;     
            }
            
            if(!done)
            {
                // accumulate digits
                value.v *= 10;
                value.v += v;

                data += 1;
            }
        }
    }

    // make twos complement if negative
    if(value.sign)
    {
        value.v = (~value.v) + 1;
    }

    used := cast(u64,data) - cast(u64,str.data);
    
    new : const string;
    new.data = data;
    new.len = str.len - used;

    return value, new;
}

func str_equal(v1 : const string, v2 : const string) bool
{
    // different len, not equal
    if(v1.len != v2.len)
    {
        return false;
    }

    for(i in 0 < v1.len)
    {
        if(v1[i] != v2[i])
        {
            return false;
        }
    }

    return true;
}

func find_str(str: const string, search: const string) const string
{
    blank: string = {NULL,0};
    if search.len == 0
    {
        return blank;
    }

    for i: s32 = 0; i + search.len < str.len; i += 1
    {
        scan: const string = {str.data + i, search.len};
        if(std::str_equal(scan,search))
        {
            return scan;
        }
    }

    return blank;
}

func split_str(str: const string, delimitter: const string) Array
{
    arr := std::make_array(sizeof_type(string));

    done := false;

    while !done
    {
        found := find_str(str,delimitter);

        if found.len != 0
        {
            scanned := found.data - str.data;
            split: const string = {str.data,cast(usize,scanned)};

            str.len -= scanned + delimitter.len;
            str.data = found.data + delimitter.len;
            
            std::push_array(&arr,&split);
        } 

        else 
        {
            done = true;
        }
    }

    std::push_array(&arr,&str);
    return arr;   
}