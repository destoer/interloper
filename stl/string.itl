namespace std;

constant ASCII_CASE_GAP : u8 = 'a' - 'A';

func to_lower(char: c8) c8
{
    if(char >= 'A' && char <= 'Z')
    {
        char -= ASCII_CASE_GAP;
    }

    return char;
}

// if printed in base 2, its 64 bits
constant MAX_INT_CHARS : u32 = 64;


func str_copy(dst: string,src: const string) usize
{
    size := min_u64(src.len,dst.len);

    memcpy(dst.data,src.data,size);

    return size;
}

// null terminate the string after copy
func str_copy_term(dst: string,src: const string) usize
{
    size := str_copy(dst,src);

    if(size != 0)
    {
        term_pos := min_u64(size,dst.len - 1);
        dst[term_pos] = '\0';
    }

    return size;
}

func swap_c8(v1 : c8@, v2 : c8@)
{
    tmp := @v1;
    @v1 = @v2;
    @v2 = tmp;
}

func reverse_str(str : string, len : usize)
{
    for(i in 0 < len / 2)
    {
        swap_c8(&str[i],&str[len - i - 1]);
    }
}

struct Value
{
    v : u64;
    sign : bool;
};

func str_valid(str : const string) bool
{
    return str.len != 0 && str.data != NULL;
}

func is_alpha(c : c8) bool
{
    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z');
}

// where it left off along with value
func parse_value(str : const string) [Value, const string]
{
    value : Value;
    data := str.data;
    end := str.data + str.len;

    // empty string
    if(!str_valid(str))
    {
        return value, str;
    }

    if(str[0] == '-')
    {
        data += 1;
        value.sign = true;
    }

    done := false;

    while(!done)
    {
        if(data == end)
        {
            done = true;
        }

        else
        {
            c := @data;

            v : u32 = 0;

            if(c >= '0' && c <= '9')
            {
                v = c - '0';
            }

            else
            {
                // letters terminate
                done  = true;
            }

            if(!done)
            {
                // accumulate digits
                value.v *= 10;
                value.v += v;

                data += 1;
            }
        }
    }

    // make twos complement if negative
    if(value.sign)
    {
        value.v = (~value.v) + 1;
    }

    used := cast(u64,data) - cast(u64,str.data);

    new: const string = {data,str.len - used};

    return value, new;
}

func parse_u64(str: const string) u64
{
    [value,next] := parse_value(str);
    return value.v;
}

func parse_s64(str: const string) s64
{
    [value,next] := parse_value(str);
    return cast(s64,value.v);
}

func str_duplicate(str: const string) string
{
    data := heap_duplicate(&itl_context.heap,str.data,str.len);
    out: string = {cast(c8@,data),str.len};

    return out;
}

func str_equal(v1 : const string, v2 : const string) bool
{
    // different len, not equal
    if(v1.len != v2.len)
    {
        return false;
    }

    return mem_equal(v1.data,v2.data,v1.len);
}

func find_str(str: const string, search: const string) const string
{
    blank: const string = {str.data,0};
    if search.len == 0
    {
        return blank;
    }

    for i: s32 = 0; i + search.len < str.len; i += 1
    {
        if(std::str_equal(str[i : i + search.len],search))
        {
            return str[i:];
        }
    }

    return blank;
}

func split_str(str: const string, delimitter: const string) Array
{
    arr := std::make_array(sizeof_type(string));

    done := false;

    while !done
    {
        found := find_str(str,delimitter);

        if found.len != 0
        {
            scanned := found.data - str.data;
            split := str[:scanned];
            std::push_array(&arr,&split);

            str = found[delimitter.len:];
        }

        else
        {
            done = true;
        }
    }

    std::push_array(&arr,&str);
    return arr;
}


struct String
{
    buf: string;
    size: usize;
}

func reserve_string_mem(str : String@, size : usize)
{
    realloc_heap_panic(&itl_context.heap,cast(byte@@,&str.buf.data),size,sizeof_type(c8));
    str.size = size;
}

func reserve_string(str : String@, size: usize)
{
    free_size := str.size - str.buf.len;

    // we have room to just dump this in
    if(free_size >= size)
    {
        return;
    }

    else
    {   
        // reserve double
        new_capacity := (str.size + size) * 2;
        reserve_string_mem(str,new_capacity);
    }
}

func push_char(str: String@, char: c8)
{
    reserve_string(str,1);
    str.buf[str.buf.len] = char;
    str.buf.len += 1;
}

func push_char_buffer(str: String@, buffer: const string)
{
    reserve_string(str,buffer.len);
    memcpy(&str.buf[str.buf.len],buffer.data,buffer.len);
    str.buf.len += buffer.len;
}


func clear_string(str: String@)
{
    str.buf.len = 0;
}

func destroy_string(str: String@)
{
    free_heap(&itl_context.heap,cast(byte@@,&str.buf.data));
    str.size = 0;
}
