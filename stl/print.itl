namespace std;

func print_int(v : u64, base : u32)
{
    if(base > 16 || base == 0)
    {
        crash_and_burn("invalid base in print_int: \n");
    }   

    if(v == 0)
    {
        write_string("0");
        return;
    }

    // integer to char lut
    DIGIT_CHAR := "0123456789ABCDEF";

    buf : c8[MAX_INT_CHARS] = {?};
    digits : u32 = 0;

    while(v != 0)
    {
        digit :=  v % base;
        v = v / base;

        char : c8 = DIGIT_CHAR[digit];

        buf[digits] = char;

        digits += 1;
    }

    reverse_str(buf,digits);

    write_string(buf[:digits]);
}

func print_dec(v : u64, sign : bool)
{
    if(sign && cast(s64,v) < 0)
    {
        v = ~v + 1;
        write_string("-");
    }

    print_int(v,10);
}

func print_bin(v : u64)
{
    write_string("0b");
    print_int(v,2);  
}

func print_hex(v : u64)
{
    write_string("0x");
    print_int(v,16);
}

func format_int(any : rtti::Any, specifier: c8)
{
    v := rtti::int_from_any(any);

    switch(specifier)
    {
        case 'd':
        {
            sign := rtti::is_signed(any.type);
            print_dec(v,sign);
        }

        case 'b':
        {
            print_bin(v);
        }

        case 'x':
        {
            print_hex(v);
        }

        default:
        {
            sign := rtti::is_signed(any.type);
            print_dec(v,sign);
        }
    }
}

func putchar(char : c8)
{
    write_str_raw(&char,sizeof(char));
}

func linefeed()
{
    putchar('\n');
}

func print_float(v : f64, spec_dp: u32)
{
    // bit cast so we can pull apart the components 
    // as we need to check for magic constants
    raw : u64;
    memcpy(&raw,&v,sizeof(v));

    sign : bool = cast(bool,raw >> 63);
    exp := (raw >> 52) & 0b1111_1111_111;
    sig := raw & ~(0b1111_1111_1111_11 << 52);

    if(exp == 0b1111_1111_111)
    {
        if(sig == 0)
        {
            if(sign)
            {
                print("-inf");
            }

            else
            {
                print("+inf");
            }
        }

        else
        {
            print("NaN");
        }

        return;
    }


    buffer: c8[256];

    dp: u32 = 0;
    idx: u32 = 0;

    // adjust so its +ve for the below algorithm
    if(sign)
    {
        buffer[idx] = '-';
        idx += 1;
        v = -v;

        // offset dp
        dp += 1;
    }

    whole_digits: u32 = 0;
    digits: u32 = 0;

    // rescale so we have it 10^1 units
    if(v > 1.0)
    {
        power : u32 = 0;

        while(v >= 10.0)
        {
            power += 1;
            v /= 10.0;
        }

        // if we have say 10^2 we have 100 i.e 3 whole digits
        whole_digits = power + 1;
        dp += whole_digits;
    }

    // special case '0' digit
    else
    {
        whole_digits = 1;

        buffer[idx] = '0';
        idx += 1;
        digits += 1;

        dp += 1;
        v *= 10.0;
    }


    // can print whole digits plus number of dp
    allowed_prec := whole_digits + spec_dp;

    // okay at this point we can just shift each digit out the rhs
    // until the number hits zero like any other printing algorithm
    // TODO: their are precision problems using floats to calculate this 
    while(v > 0.0 && idx < buffer.len && digits < allowed_prec)
    {
        // set dp
        if(idx == dp)
        {
            buffer[idx] = '.';
            idx += 1;
        }

        digit := cast(s32,v);

        // convert digit to char
        buffer[idx] = cast(c8,'0' + digit);
        idx += 1;
        digits += 1;

        // move in next digit
        v -= cast(f64,digit);
        v *= 10.0;
    }

    // pad with 0 till desired formatting
    while(digits < allowed_prec && idx < buffer.len)
    {
        buffer[idx] = '0';
        idx += 1;
        digits += 1;
    }

    // write out the result
    write_str_raw(&buffer[0],idx);
}

func print_builtin_arg(arg: rtti::Any, specifier : c8)
{
    builtin := cast(rtti::BuiltinType@,arg.type);

    switch(builtin.builtin)
    {
        case rtti::builtin_type::u8_t:
        {
            format_int(arg,specifier);
        }

        case rtti::builtin_type::u16_t:
        {
            format_int(arg,specifier);
        }

        case rtti::builtin_type::u32_t:
        {
            format_int(arg,specifier);
        }

        case rtti::builtin_type::u64_t:
        {
            format_int(arg,specifier);
        }

        case rtti::builtin_type::s8_t:
        {
            format_int(arg,specifier);
        }

        case rtti::builtin_type::s16_t:
        {
            format_int(arg,specifier);
        }

        case rtti::builtin_type::s32_t:
        {
            format_int(arg,specifier);
        }

        case rtti::builtin_type::s64_t:
        {
            format_int(arg,specifier);
        }

        case rtti::builtin_type::c8_t:
        {
            char := rtti::char_from_any(arg);

            putchar(char);
        }

        case rtti::builtin_type::byte_t:
        {
            format_int(arg,specifier);
        }

        case rtti::builtin_type::f64_t:
        {
            float := rtti::float_from_any(arg);

            print_float(float,6);
        }

        case rtti::builtin_type::bool_t:
        {
            res := rtti::bool_from_any(arg);

            if(res)
            {
                write_string("true");
            }

            else
            {
                write_string("false");
            }
        }

        case rtti::builtin_type::null_t:
        {
            write_string("NULL");
        }
    }
}

func print_arg(arg : rtti::Any, specifier : c8)
{
    type := arg.type;

    switch(type.kind)
    {
        case rtti::type_class::builtin_t:
        {
            print_builtin_arg(arg, specifier);
        }

        case rtti::type_class::pointer_t:
        {
            v := rtti::int_from_any(arg);

            if(!v)
            {
                write_string("NULL");
            }

            else
            {
                write_string("0x");
                print_int(v,16);
            }
        }

        case rtti::type_class::array_t:
        {
            array_type := cast(const rtti::ArrayType@,type);

            contained_type := array_type.contained_type;

            if(rtti::is_runtime_size(array_type.size))
            {
                // vla string
                if(contained_type.kind == rtti::type_class::builtin_t && rtti::cast_builtin(contained_type) == rtti::builtin_type::c8_t)
                {
                    vla := cast(rtti::Vla@,arg.data);
                    write_str_raw(cast(c8@,vla.data),vla.len);
                }

                else
                {   
                    unimplemented("vla array print");
                }
            }
            
            // fixed size
            else
            {
                if(contained_type.kind == rtti::type_class::builtin_t && rtti::cast_builtin(contained_type) == rtti::builtin_type::c8_t)
                {
                    v := rtti::int_from_any(arg);

                    char_ptr : const c8@ = cast(const c8@,v);
                    write_str_raw(char_ptr,array_type.size);
                }

                else
                {
                    unimplemented("array print");
                }
            }
        }

        case rtti::type_class::struct_t:
        {
            unimplemented("struct print");
        }

        case rtti::type_class::enum_t:
        {
            unimplemented("enum print");
        }
    }
}


func print_args(fmt : const string, args : const rtti::Any[])
{
    // preven print if stdout aint setup
    if(!global_setup)
    {
        return;
    }

    arg_count : u32 = 0;

    for(i in 0 < fmt.len)
    {
        char := fmt[i];

        if(char == '{')
        {
            if(fmt.len <= i + 1 || arg_count == args.len)
            {
                crash_and_burn("ran out of args in print()");
                return;
            }
        
            specifier := fmt[i+1];

            // default fmt
            if(specifier == '}')
            {
                print_arg(args[arg_count],'\0');
                arg_count += 1;
                i += 1;
            }

            // arg with specifier
            else
            {
                print_arg(args[arg_count],specifier);
                i += 2;
                arg_count += 1;   
            }
        }

        else
        {
            putchar(char);
        }
    }
}

func print(fmt: const string, args : ...)
{
    print_args(fmt,args);
}

func println(fmt: const string, args : ...)
{
    print_args(fmt,args);
    linefeed();
}

// TODO: add line and file info? (what mechanism should be used for this)
func unimplemented_args(fmt: const string, args: const rtti::Any[])
{
    write_string("\nunimplemented: ");
    print_args(fmt,args);
    
    write_string("\n");

    exit(2);
}

func crash_and_burn_args(fmt: const string, args: const rtti::Any[])
{
    write_string("\ncrash and burn: ");
    print_args(fmt,args);

    write_string("\n");

    exit(2);
}

func crash_and_burn(fmt: const string, args: ...)
{
    crash_and_burn_args(fmt,args);
}

func unimplemented(fmt: const string, args: ...)
{
    unimplemented_args(fmt,args);
}