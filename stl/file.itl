import <basic>

constant FILE_BLOCK_SIZE : u32 = 4096;
constant FILE_DEFAULT_BUFFER_SIZE : u32 = FILE_BLOCK_SIZE * 1;

enum file_mode
{
    read,
    write,
}

enum file_opt
{
    create,
    append,
    open,
}

struct File
{
    flags : u32;

    // os handle
    handle : byte@;
    
    // for buffered io
    buf : byte[];
    
    mode : file_mode;

    // inside our buffer, how much data do we have?
    buffer_offset : u64;
    buffer_size : u64;
}

enum file_read_res
{
    eof,
    error,
    success,
}

constant FILE_FLAG_ERROR : u32 = 1 << 0;
constant FILE_FLAG_EOF : u32 = 1 << 1;

constant FILE_FLAG_LINE_BUFFER : u32 = 1 << 2;

func file_valid(file : const File@) bool
{
    return (file.flags & FILE_FLAG_ERROR) == 0;
}

func open_file(str : const string, mode : file_mode, opt : file_opt) [File,bool]
{
    file : File;    

    // null terminate the string in a stack buffer
    buf : c8[256] = {?};

    memcpy(&buf[0],&str[0],min_u64(str.len,buf.len - 1));
    buf[str.len] = '\0';

    file.handle = os_open(&buf[0],mode,opt); 
    file.mode = mode;

    if(!is_os_handle_valid(file.handle))
    {
        file.flags = file.flags | FILE_FLAG_ERROR;
        return file,true;
    }

    file.buf = byte_array_heap(&global_heap,FILE_DEFAULT_BUFFER_SIZE);

    return file,false;
}

func close_file(file : File@)
{
    // allready closed
    if(file.handle == cast(byte@,INVALID_FILE_HANDLE))
    {
        return;
    }

    // flush any pending writes
    if(file.mode == file_mode::write && file.buffer_size != 0)
    {
        flush_write(file);
    }

    os_close(file.handle);
    file.handle = cast(byte@,INVALID_FILE_HANDLE);

    // free our buffer
    free_heap(&global_heap,&file.buf.data);
}


func flush_write(file : File@) 
{
    os_write(file.handle,&file.buf[0],file.buffer_size);
    file.buffer_size = 0;
    file.buffer_offset = 0;
}

// NOTE: this does no error checking
func buffer_file_write(file : File@, buf : const byte@, len : u64)
{
    memcpy(&file.buf[file.buffer_offset],buf,len);

    file.buffer_offset += len;
    file.buffer_size += len;     
}

func write_file_str(file : File@, str : const string) s64
{
    return write_file_mem(file,str.data, str.len); 
}

func write_file_line_buffer(file : File@, buf : const byte@, len : u64) s64
{
    if(!file_valid(file))
    {
        exit(EXIT_INVALID_FILE);
    }

    // buffer in data until we see a new line and then flush it
    end := buf + len;

    while(buf != end)
    {
        // buffer is full flush it to disk
        if(file.buf.len == file.buffer_size)
        {
            flush_write(file);
        }        

        char := @buf;
        buf += 1;

        file.buf[file.buffer_offset] = char;

        file.buffer_offset += 1;
        file.buffer_size += 1;

        // we have seen a newline flush it out
        if(char == '\n')
        {
            flush_write(file);
        }
    }

    return len;    
}

func write_file_mem(file : File@,buf : const byte@, len : u64) s64
{
    if(!file_valid(file))
    {
        exit(EXIT_INVALID_FILE);
    }

    // flush buffer to disk when a linefeed is seen
    if(file.flags & FILE_FLAG_LINE_BUFFER)
    {
        return write_file_line_buffer(file,buf,len);
    }

    // write is larger than buffer size, just dump everything
    if(len >= FILE_DEFAULT_BUFFER_SIZE)
    {
        flush_write(file);
        os_write(file.handle,buf,len);
        return len;
    }

    remain := len;
    offset : u64 = 0;

    // buffer the file writes in
    while(remain != 0)
    {
        // buffer is full flush it to disk
        if(file.buf.len == file.buffer_size)
        {
            flush_write(file);
        }

        // full? flush it to disk and rebuffer the remaining
        buffer_size := min_u64(remain,file.buf.len - file.buffer_size);

        buffer_file_write(file,buf,buffer_size);

        remain -= buffer_size;
        buf += buffer_size;
    }

    return len;
}


func buffer_file_read(file : File@) file_read_res
{
    len := os_read(file.handle,file.buf.data,FILE_DEFAULT_BUFFER_SIZE);

    // TODO: this should be a switch
    if(len == 0)
    {
        file.flags = file.flags | FILE_FLAG_EOF;
        return file_read_res::eof;
    }

    else if(len == OS_INVALID_READ)
    {
        return file_read_res::error;
    }

    file.buffer_offset = 0;
    file.buffer_size = cast(u64,len);

    return file_read_res::success;
}

// flush file buffer, into passed buffer
func flush_read(file : File@, ptr : byte@, len : u64)
{
    memcpy(ptr,&file.buf[file.buffer_offset],len);

    file.buffer_offset += len;
    file.buffer_size -= len;  
}

func read_file_str(file : File@, str : string) [string, file_read_res]
{
    if(!file_valid(file))
    {
        exit(EXIT_INVALID_FILE);
    }

    // buffer is empty rebuffer it
    if(file.buffer_size == 0)
    {
        res := buffer_file_read(file);

        // error or eof
        if(res != file_read_res::success)
        {
            buf : string;
            return buf,res;
        }
    }

    // attempt to find the first occurence of a '\n' 
    // now we have a buffer to work with
    remain := str.len; 
    out_offset : u64 = 0;

    while(true)
    { 
        // save size of buffer for later
        pending := file.buffer_size;

        // setup pointers to scan for '\n'
        start := &file.buf[file.buffer_offset];
        ptr := start;

        // max is end of the buffer or str len, whatever is lowest
        max_read := min_u64(pending,remain);
        end := &file.buf[file.buffer_offset + max_read];

        while(ptr != end)
        {
            // newline found
            if(@ptr == '\n')
            {
                // we have read out this char
                ptr += 1;
                remain -= 1;

                // correct the buffer offsets for the last scan
                read := cast(u64,ptr) - cast(u64,start);

                // perform the final flush to the buffer
                flush_read(file,&str[out_offset],read);

                // produce the final res
                buf := clip_str(str,str.len - remain);

                return buf,file_read_res::success;
            }

            // goto next char
            ptr += 1;
            remain -= 1;
        }


        // flush what we have out to buffer
        flush_read(file,&str[out_offset],max_read);
        out_offset += max_read;

        // rebuffer the file out
        res := buffer_file_read(file);

        // there is nothing left to read, or there is an error
        if(res != file_read_res::success|| remain == 0)
        {
            buf := clip_str(str,str.len - remain);

            return buf,res;
        }
    }

    // TODO: we dont no return detection yet
    crash_and_burn("unreachable");

    // no newline hit return str
    buf : string;

    return buf,file_read_res::error;
}

func read_file_mem(file : File@, buf : byte[]) [u64, file_read_res]
{
    [len,res] := read_file_raw(file,buf.data,buf.len);
    return len,res;
}

func read_file_raw(file : File@,buf : byte@, len : u64) [u64, file_read_res]
{
    if(!file_valid(file))
    {
        exit(EXIT_INVALID_FILE);
    }

    // enough in the buffer just pass it back out
    if(len <= file.buffer_size)
    {
        flush_read(file,buf,len);
        return len,file_read_res::success;
    }

    // buffer is empty rebuffer it
    if(file.buffer_size == 0)
    {
        res := buffer_file_read(file);

        if(res != file_read_res::success)
        {
            return 0, res;
        }
    }


    // TODO: should there be a limit where we just directly dump it into the os?
    remain := len;

    res := file_read_res::success;

    // buffer file in until we are done
    while(remain != 0 && res == file_read_res::success)
    {
        // flush out any pending data
        pending := file.buffer_size;
        flush_size := min_u64(remain,pending);

        flush_read(file,buf,flush_size);

        // less byte to read
        remain -= pending;

        // buffer next ammount of file in
        res = buffer_file_read(file);
    }

    // calc how much we actually read
    read := len - remain;

    return read, res;
}


enum file_seek
{
    start,
    cur,
    end,
};

func file_seek(file: File@, seek: file_seek, offset : s64)
{
    os_seek(file.handle,seek,offset);
}

func file_tell(file: File@) s64
{
    return os_tell(file.handle);
}

func file_size(file: File@) s64
{
    // save pos so we can restore it later
    old := file_tell(file);

    // seek to end and get pos 
    file_seek(file,file_seek::end,0);
    size := file_tell(file);

    // reset the file pos
    file_seek(file,file_seek::start,old);

    return size;
}

func read_bin(name : const string) [byte[],bool]
{
    buf : byte[];

    [file,err] := open_file(name,file_mode::read,file_opt::open);

    if(err)
    {
        return buf,true;
    }

    size := file_size(&file);

    if(size == -1)
    {
        close_file(&file);
        return buf,true;
    }

    buf = byte_array_heap(&global_heap,cast(u64,size));

    [read,file_res] := read_file_mem(&file,buf);

    // done with file remember to close it
    close_file(&file);

    // error reading file
    if(file_res == file_read_res::error)
    {
        return buf,true;
    }

    return buf,false;
}