// string type aliases
type_alias c8 = u8;
type_alias string = c8[];


//RUNTIME_SIZE : const u32 = 0xfffffff0;

enum builtin_type
{
    u8_t,
    u16_t,
    u32_t,

    s8_t,
    s16_t,
    s32_t,

    byte_t,

    bool_t,

    null_t,
}

// NOTE: these structs are directly interfaced with by the compiler
// editing cause rtti to fail to compile

struct Type
{
    type_idx : const u32;

    // specifiers
    is_const : const bool;
};

struct PointerType (type : const Type)
{
    contained_type : const Type@;
};

struct StructType (type : const Type)
{
    struct_idx : const u32;
};

struct EnumType (type : const Type)
{
    enum_idx : const u32;
};


struct Any
{
    // NOTE: for types < GPR_SIZE they are written directly into the pointer
    // use the helper functions to get at the data
    data : const byte@;

    type : const Type@;
};


func is_builtin(type_idx : u32) bool
{
    return type_idx < builtin_type.len;
}

/*
// TODO: we need function overloading for this
func is_builtin(type : const Type@) bool
{
    return is_builtin(type.type_idx);
}
*/

