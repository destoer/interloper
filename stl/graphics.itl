namespace gfx;

import <os_graphics>
import <input>

struct Window
{
    width : u32;
    height : u32;
    screen: u32[];

    os_win : OSWindow;

    quit : bool = false;
    input : Input;
}

constant WINDOW_PREFIX :  string = "[WINDOW]: ";

func test_pattern(screen: u32[], x: u32, y: u32)
{
    std::fill_array<u32>(screen,0x0000_ff00);

    screen[((y / 2) * x) + (x / 2)] = 0x0000_00ff;
}

// called when os window is resized
func window_resized(win: Window@,x : u32, y : u32)
{
    std::log(WINDOW_PREFIX,"resized {} {}\n",x,y);

    win.width = x;
    win.height = y;

    // realloc our buffer
    std::array_realloc<u32>(&global_heap,&win.screen,x * y);

    // blank the screen
    test_pattern(win.screen,x,y);
}

func open_window(str : const string, x : u32, y : u32) Window
{
    win : Window;

    os_open_window(&win,str,x,y);

    window_resized(&win,x,y);

    return win;
}

func close_window(win : Window@)
{
    std::destroy_arr_heap<u32>(&global_heap,&win.screen);
    os_destroy_window(&win.os_win);
}

func draw_window(win : Window@, screen: const u32[])
{
    os_draw_window(&win.os_win,screen,win.width,win.height);
}

func process_events(win: Window@) bool
{
    return os_process_events(win);
}