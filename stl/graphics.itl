namespace gfx;

import <colour>
import <os_graphics>
import <input>

struct Window
{
    size: std::Vec2I;
    bounds: std::Vec2I;
    screen: u32[];

    os_win : OSWindow;

    quit : bool = false;
    input : input::Input;

    start_timestamp: f64;
    end_timestamp: f64;

    target: f64;
    limit: f64;
}

struct Colour
{
    r : f64;
    g : f64;
    b : f64;
};

#attr(use_result)
enum win_result
{
    ok,
    closed,
    err,
}

constant WINDOW_PREFIX :  string = "WINDOW ";

func blank_screen(screen: u32[])
{
    for @v in screen
    {
        @v = BLACK;
    }   
}

func test_pattern(screen: u32[], x: u32, y: u32)
{
    for @v in screen
    {
        @v = colour::GREEN;
    }

    screen[((y / 2) * x) + (x / 2)] = 0x0000_00ff;
}

func clip_bound(bound: u32) u32
{
    if(bound == 0)
    {
        return 0;
    }

    return bound - 1;
}

// called when os window is resized
func window_resized(win: Window@,x : u32, y : u32)
{
    if(x <= 1 || y <= 1)
    {
        std::crash_and_burn("Window is < 1 pixel");
    }

    log::info(WINDOW_PREFIX,"resized {} {}",x,y);

    win.size.x = x;
    win.size.y = y;
    
    win.bounds.x = clip_bound(x);
    win.bounds.y = clip_bound(y);

    // realloc our buffer
    std::arr_realloc_u32(&itl_context.heap,&win.screen,x * y);
}

func open_window(str : const string, x : u32, y : u32) [Window, win_result]
{
    win : Window;
    win.input = input::make_input();

    res := os_open_window(&win,str,x,y);

    if(res != win_result::ok)
    {
        return win, res;
    }

    window_resized(&win,x,y);

    win.limit = 1000.0 / 60.0;
    win.target = win.limit;

    return win, win_result::ok;
}

func close_window(win : Window@) win_result
{
    std::destroy_arr_heap_u32(&itl_context.heap,&win.screen);
    return os_destroy_window(&win.os_win);
}

func draw_window(win : Window@, screen: const u32[]) win_result
{
    if(win.quit)
    {
        return win_result::ok;
    }

    return os_draw_window(&win.os_win,screen,cast(u32,win.size.x),cast(u32,win.size.y));
}

// NOTE: these are just general helpers we should still be able to
// mess with this manually if we want, this just makes it simpler
// to get a standard 60 fps limited window
func start_frame(win : Window@) win_result
{
    win.start_timestamp = std::timestamp_ms();

    return gfx::process_events(win);
}

func end_frame(win : Window@)
{
    win.end_timestamp = std::timestamp_ms();

    taken := win.end_timestamp - win.start_timestamp;

    sleep := win.target - taken;

    //std::print("fps: {}\n",cast(u32,1000.0 / sleep));

    if(sleep > 0.0)
    {
        std::sleep_ms(cast(u32,sleep));
    }

    // overshot the frame
    else
    {
        win.target = win.limit + sleep;
    }
}


func process_events(win: Window@) win_result
{
    return os_process_events(win);
}