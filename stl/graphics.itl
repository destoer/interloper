struct Window
{
    width : u32;
    height : u32;

    os_win : OSWindow;
}

// TODO: move this later
import <socket>

constant X11_PREFIX : string = "[X WINDOW]: ";

// TODO: namespace this lot under x11::

// https://www.x.org/releases/X11R7.5/doc/x11proto/proto.pdf
struct OSWindow
{
    // protocol buffer
    buf : Array;

    sock : Socket;

    root_win : u32;
    screen_x : u32;
    screen_y : u32;
    scanline_pad : u32;

    max_req : u32;

    max_lines : u32;

    window_id : u32;
    gfx_ctx : u32;


    seq_count : u32;

    resource_base : u32;
    resource_mask : u32;
    resource_id: u32;
}

func alloc_resource(win: OSWindow@) u32
{
    id := win.resource_id;
    win.resource_id += 1;

    return (id & win.resource_mask) | win.resource_base;
}

func pad_x11(E : u32) u32
{
    return (4 - (E & 3)) & 3;
}

func send_req<T>(win : OSWindow@, v : const T@)
{
    send_var<T>(&win.sock,v);
    win.seq_count += 1;
}

func build_auth_packet(buf: Array@)
{
    // reset our working buffer
    clear_array(buf);

    // build initial authentication packet

    // byte order 
    if(LITTLE_ENDIAN)
    {
        push_u8(buf,'l');
    }

    else
    {
        push_u8(buf,'B');
    }


    // unused
    push_u8(buf,0x0);

    // version 11.0
    push_u16(buf,11);
    push_u16(buf,0);

    // no authentication no strings
    push_u32(buf,0);

    // pad
    push_u16(buf,0);
}

func read_x11_reply(win: OSWindow@, size : u32)
{
    // get our specified bytes
    recv_clear_array(&win.sock,&win.buf,size);
}



#attr(no_reorder)
struct XSetupInfo
{
    release : u32;
    resource_id_base : u32;
    resource_id_mask : u32;
    motion_buffer_size : u32;
    vendor_size : u16;
    max_req_len : u16;
    screen_count : u8;
    format_size : u8;
    image_order  : u8;
    bitmap_order : u8;
    bitmap_scanline_fmt_unit : u8;
    bitmap_format_scanline_pad : u8;
    min_keycode : u8;
    max_keycode : u8;
    pad1 : u32;
};

#attr(no_reorder)
struct XFormat
{
    depth : u8;
    bpp : u8;
    scanline_pad : u8;
    pad1 : u8[5];
};

#attr(no_reorder)
struct XScreen
{
    root : u32;
    colour_map : u32;
    white : u32;
    black : u32;
    input_mask : u32;
    width : u16;
    height : u16;
    width_m : u16;
    height_m : u16;
    min_map : u16;
    max_map : u16;
    root_visual : u32;
    backing_store : u8;
    save_under : u8;
    root_depth : u8;
    depth_count : u8;
}

#attr(no_reorder)
struct XDepth
{
    depth : u8;
    pad1 : u8;
    vis_size : u16;
    pad2 : u32;
}

#attr(no_reorder)
struct XVisualType
{
    id : u32;
    class : u8;
    bpr: u8;
    map_entires : u16;
    red_mask : u32;
    green_mask : u32;
    blue_mask : u32;
    pad1 : u32;
}

#attr(no_reorder)
struct XQueryTree
{
    opcode : u8 = 15;
    pad1 : u8;
    len: u16 = 2;
    window: u32;
}

func query_tree(win: OSWindow@, root : u32)
{
    query : XQueryTree;
    query.window = root;

    send_var<XQueryTree>(&win.sock,&query);
}

func read_setup_info(win: OSWindow@)
{
    buf := &win.buf;

    recv_ignore(&win.sock,1);

    // read in our first batch of data
    read_x11_reply(win,6);

    log(X11_PREFIX,"version {}.{}\n",read_buffer<u16>(buf,0),read_buffer<u16>(buf,2));

    len : u32 = read_buffer<u16>(buf,4) * 4;

    log(X11_PREFIX,"len {}\n",len);

    info := recv_var<XSetupInfo>(&win.sock);

    log(X11_PREFIX,"big endian bitmap order: {}\n",cast(bool,info.bitmap_order));

    read_x11_reply(win,info.vendor_size);
    log(X11_PREFIX,"vendor {}\n",str_from_array(buf),info.vendor_size);

    recv_ignore(&win.sock,pad_x11(info.vendor_size));

    log(X11_PREFIX,"resource {b} : {b}\n\n",info.resource_id_base,info.resource_id_mask);

    log(X11_PREFIX,"max req len: {}\n",info.max_req_len * 4);

    win.resource_base = info.resource_id_base;
    win.resource_mask = info.resource_id_mask;

    win.max_req = info.max_req_len * 4;

    for(i in 0 < info.format_size)
    {
        fmt := recv_var<XFormat>(&win.sock);
    /*
        log(X11_PREFIX,"format {}\n",i);
        log(X11_PREFIX,"depth {}\n",fmt.depth);
        log(X11_PREFIX,"bits per pixel {}\n",fmt.bpp);
        log(X11_PREFIX,"scanline pad {}\n\n",fmt.scanline_pad);
    */
    }

    for(i in 0 < info.screen_count)
    {
        screen := recv_var<XScreen>(&win.sock);
        log(X11_PREFIX,"screen {}\n",i);
        log(X11_PREFIX,"root {}\n",screen.root);
        log(X11_PREFIX,"measurements {}mm : {}mm\n",screen.width_m,screen.height_m);
        log(X11_PREFIX,"dimensions {} : {}\n\n",screen.width, screen.height);

        // default this to first screen
        if(i == 0)
        {
            win.screen_x = screen.width;
            win.screen_y = screen.height;
            win.root_win = screen.root;
        }

        // read out each depth
        for(d in 0 < screen.depth_count)
        {
            depth := recv_var<XDepth>(&win.sock);

            //log(X11_PREFIX,"depth {}\n\n",depth.depth);

            for(v in 0 < depth.vis_size)
            {
                visual_type := recv_var<XVisualType>(&win.sock);
                /*
                log(X11_PREFIX,"id {}\n",visual_type.id);
                log(X11_PREFIX,"class {}\n",visual_type.class);
                log(X11_PREFIX,"bpr {}\n\n",visual_type.bpr); 
                */
            }
        }
    }

}

func authenticate(win: OSWindow@) bool
{
    buf := &win.buf;

    build_auth_packet(buf);

    // actually send the packet
    send_array(&win.sock,buf);

    // recv back our data
    rc := recv_var<u8>(&win.sock);

    constant AUTH_SUCCESS : u32 = 1;

    switch(rc)
    {
        case AUTH_SUCCESS:
        {
            log(X11_PREFIX,"connected to x server:\n");
            read_setup_info(win);
        }

        default:
        {
            return true;
        }
    }

    return false;
}

#attr(no_reorder)
struct XCreateWindow
{
    opcode : u8 = 1;
    depth : u8;
    req_len : u16;
    window : u32;
    parent : u32;
    x : s16;
    y : s16;
    width : u16;
    height : u16;
    border_width : u16;
    class : u16;
    visual_id : u16;
    value_mask : u32;
}

#attr(no_reorder)
struct XCreateNotify
{
    code : u8;
    pad1 : u8;
    seq : u16;
    parent : u32;
    window : u32;
    x : s16;
    y : s16;
    width : u16;
    height : u16;
    border_width : u16;
    override_redirect : u8;
    pad2 : u8[9];
}

#attr(no_reorder)
struct XMapWindow
{
    code : u8 = 8;
    pad1 : u8 = 0;
    len : u16 = 2;
    window : u32;
}

func x11_req_len(len : u64) u16
{
    return cast(u16,len / 4);
}

func map_window(win : OSWindow@, id : u32)
{
    map : XMapWindow;
    map.window = id;

    send_req<XMapWindow>(win,&map);
}

#attr(no_reorder)
struct XDestroyWindow
{
    code : u8 = 4;
    pad1: u8 = 0;
    len : u16 = 2;
    window : u32;
}

// TODO: we need namspacing 
func x11_destroy_window(win : OSWindow@, id : u32)
{
    destroy : XDestroyWindow;
    destroy.window = id;

    send_req<XDestroyWindow>(win,&destroy);
}

enum x_reply_type : u8
{
    error = 0,
    reply = 1,
}

func process_reply(win : OSWindow@)
{
    buf := &win.buf;

    len := read_array<u32>(buf,4) * 4;

    // burn through this reply
    recv_ignore(&win.sock,len);
}

#attr(no_reorder)
struct XError
{
    error: u8 = 0;
    code: u8;
    seq_number: u16;
    data: u32;
    minor_opcode: u16;
    major_opcode: u8;
    pad1: u8[21];
}

func process_error(win : OSWindow@)
{
    buf := &win.buf;

    error := cast(XError@,buf.buf.data);

    log(X11_PREFIX,"Error: {}\n",error.code);
    log(X11_PREFIX,"Seq: {}\n",error.seq_number);
    log(X11_PREFIX,"Data: {}\n",error.data);
    log(X11_PREFIX,"Opcode: {} {}\n\n",error.major_opcode,error.minor_opcode);
}


#attr(no_reorder)
struct XPutImage
{
    opcode: u8 = 72;
    format: u8 = 2;
    len: u16 = 6;
    drawable: u32;
    gc: u32;
    width: u16;
    height: u16;
    dst_x: s16;
    dst_y: s16;
    left_pad : u8;
    depth: u8;
    pad1: u16;
}

func draw_lines(win: OSWindow@, ptr: const u32@, start_y: u32,lines: u32, stride: u32)
{
    // calc data size
    pixel_size := cast(u32,lines * stride * sizeof_type(u32));

    pad := pad_x11(pixel_size);

    // send image req
    put_image: XPutImage;

    put_image.gc = win.gfx_ctx;
    put_image.depth = 24;

    put_image.dst_y = cast(s16,start_y);

    put_image.width = cast(u16,stride);
    put_image.height = cast(u16,lines);

    put_image.drawable = win.window_id;
   
    put_image.len += cast(u16,(pixel_size + pad) / 4);
    
    send_req<XPutImage>(win,&put_image);

    // send pending data
    send_raw(&win.sock,ptr,pixel_size);
    
    // send pad 
    // NOTE: uses screen data just because its easy
    send_raw(&win.sock,ptr,pad);

    //print("sent {}\n",put_image.len * 4);
}

func os_draw_window(win: OSWindow@, screen: const u32[], width : u32, height : u32)
{
    lines := win.max_lines;
    ptr := screen.data;

    offset := width * lines;

    for(y : u32 = 0; y < height; y += lines)
    {
        to_draw := min_u32(lines,height - y);

        draw_lines(win,ptr,y,to_draw,width);

        ptr += offset;
    }
}

func draw_window(win : Window@, screen: const u32[])
{
    os_draw_window(&win.os_win,screen,win.width,win.height);
}

func proccess_response(win : OSWindow@)
{
    while(socket_has_data(&win.sock))
    {
        buf := &win.buf;

        // TODO: we probably want to peek this...
        recv_clear_array(&win.sock,buf,32);

        type := read_array<x_reply_type>(buf,0);

        switch(type)
        {
            case x_reply_type::error:
            {
                process_error(win);
            }

            case x_reply_type::reply:
            {
                process_reply(win);
            }

            default:
            {
                log(X11_PREFIX,"Notify: {}\n",cast(u8,type));
            }
        }
    }
}

// NOTE: this is higher level primtive
func proccess_events(win: Window@)
{
    proccess_response(&win.os_win);
}

constant WINDOW_CLASS_INPUT_OUTPUT : u16 = 1;

#attr(flag)
enum window_create_flag : u32
{
    background_pixmap,
    background_pixel,
    border_pixmap,
    border_pixel,
    bit_gravity,
    win_gravity,
    backing_store,
    backing_planes,
    backing_pixel,
    override_redirect,
    save_under,
    event_mask,
    do_not_propagate,
    colour_map,
    cursor,
}

#attr(flag)
enum event_flag : u32
{
    key_press,
    key_release,
    button_press,
    button_release,
    enter_window,
    leave_window,
    pointer_motion,
    pointer_motion_hint,
    button1_motion,
    button2_motion,
    button3_motion,
    button4_motion,
    button5_motion,
    button_motion,
    key_map_state,
    exposure,
    visibility_change,
    structure_notify,
    resize_redirect,
    substructure_notify,
    substructure_redirect,
    focus_change,
    property_change,
    colour_map_change,
    owner_grab_button,
}

func create_window(win : OSWindow@, x : u32, y : u32) bool
{
    // allocate a an id and save it
    win.window_id = alloc_resource(win);

    log(X11_PREFIX,"window id: {}\n",win.window_id);

    // build end list
    buf := &win.buf;
    clear_array(buf);

    // first the events we want to listen for
    events : u32 = event_flag::structure_notify;
    push_u32(buf,events);

    // attempt to get a rgba window
    win_req : XCreateWindow;
    win_req.req_len = x11_req_len(sizeof_data(XCreateWindow) + buf.size);

    win_req.window = win.window_id;

    // rgb888
    win_req.depth = 24;

    win_req.class = WINDOW_CLASS_INPUT_OUTPUT;

    // set root as parent
    win_req.parent = win.root_win;

    win_req.x = cast(s16,win.screen_x / 2);
    win_req.y = cast(s16,win.screen_y / 2);

    
    win_req.width = cast(u16,x);
    win_req.height = cast(u16,y);

    // TODO: dont know how large this should be
    // but we want visual confirmation
    win_req.border_width = 20;

    // mark what window settings we want to change
    win_req.value_mask |= window_create_flag::event_mask;

    // send the main request
    send_req<XCreateWindow>(win,&win_req);
    
    // send end list
    send_array(&win.sock,buf);

    // now map in the window
    map_window(win,win.window_id);

    return false;
}

#attr(no_reorder)
struct XCreateGC
{
    opcode: u8 = 55;
    pad1: u8;
    len: u16 = 4;
    cid: u32;
    drawable: u32;
    value_mask: u32;
}

func create_gfx_ctx(win: OSWindow@) bool
{
    // reserve id for gfx ctx
    win.gfx_ctx = alloc_resource(win);

    gc: XCreateGC;

    gc.cid = win.gfx_ctx;
    gc.drawable = win.window_id;

    send_req<XCreateGC>(win,&gc);

    return false;
}

/*
struct XQueryExtension
{

}

func enable_big_req(win: OSWindow@) bool
{
    "BIG-REQUESTS"

    return false;
}
*/

func os_open_window(str : const string, x : u32, y : u32) OSWindow 
{
    win : OSWindow;

    // open connection to x server
    win.sock = connect_unix_domain("/tmp/.X11-unix/X1");

    if(!socket_valid(&win.sock))
    {
        crash_and_burn("window socket not valid");
    }

    if(authenticate(&win))
    {
        crash_and_burn("could not authenticate to server");
    }

    if(create_window(&win,x,y))
    {
        crash_and_burn("could not create window");
    }

    if(create_gfx_ctx(&win))
    {
        crash_and_burn("could not create gfx ctx");
    }

/*
    // TODO: this should be allowed to fail
    if(enable_big_req(&win))
    {
        crash_and_burn("could not enable big req");
    }
*/
    // what is the max number of lines we can push in one go?
    win.max_lines = win.max_req / (x * sizeof_type(u32));

    log(X11_PREFIX,"max lines: {}\n",win.max_lines);

    // should be able to push atleast one scanline in a go
    assert(win.max_lines >= 1);

    return win;
}

func os_destroy_window(win : OSWindow@)
{
    // destroy all resources
    x11_destroy_window(win,win.window_id);

    // close down our socket and free our working buffer
    destroy_array(&win.buf);
    close_sock(&win.sock);
}

func open_window(str : const string, x : u32, y : u32) Window
{
    win : Window;
    win.width = x;
    win.height = y;

    win.os_win = os_open_window(str,x,y);

    return win;
}

func close_window(win : Window@)
{
    os_destroy_window(&win.os_win);
}