struct Window
{
    width : u32;
    height : u32;

    os_win : OSWindow;
}

// TODO: move this later
import <socket>


// TODO: namespace this lot

// https://www.x.org/releases/X11R7.5/doc/x11proto/proto.pdf
struct OSWindow
{
    // protocol buffer
    buf : Array;

    sock : Socket;
}

func build_request_header(arr: Array@,opcode : u8, data : u8)
{
    clear_array(arr);

    push_array<u8>(arr,opcode);
    push_array<u8>(arr,data);

    // length to be filled later
    push_array<u16>(arr,0x00_00);
}

func pad_x11(arr: Array@, E : u32)
{
    pad := (4 - (E & 3)) & 3;

    if(pad != 0)
    {
        resize_array(arr,arr.size + pad);
    }
}

func build_auth_packet(buf: Array@)
{
    // reset our working buffer
    clear_array(buf);

    // build initial authentication packet

    // byte order 
    if(LITTLE_ENDIAN)
    {
        push_array<u8>(buf,'l');
    }

    else
    {
        push_array<u8>(buf,'B');
    }


    // unused
    push_array<u8>(buf,0x0);

    // version 11.0
    push_array<u16>(buf,11);
    push_array<u16>(buf,0);

    // no authentication no strings
    push_array<u32>(buf,0);

    // pad
    push_array<u16>(buf,0);
}

func read_x11_reply(win: OSWindow@, size : u32)
{
    // reset the array so we can read fresh data in
    clear_array(&win.buf);

    // get our specified bytes
    recv_arr_all(&win.sock,&win.buf,size);
}


func read_x11_struct<T>(win: OSWindow@) T
{
    return recv_var_all<T>(win.sock);
}

#attr(no_reorder)
struct XSetupInfo
{
    release : u32;
    resource_id : u32;
    resource_id_mask : u32;
    motion_buffer_size : u32;
    vendor_size : u16;
    max_req_len : u16;
    screen_count : u8;
    format_size : u8;
    image_order  : u8;
    bitmap_order : u8;
    bitmap_scanline_fmt_unit : u8;
    bitmap_format_scanline_pad : u8;
    min_keycode : u8;
    max_keycode : u8;
    pad1 : u32;
};


func read_setup_info(win: OSWindow@)
{
    buf := &win.buf;

    ignore_byte(&win.sock);

    // read in our first batch of data
    read_x11_reply(win,6);

    log("version {}.{}\n",read_buffer<u16>(buf,0),read_buffer<u16>(buf,2));

    len : u32 = read_buffer<u16>(buf,4) * 4;

    log("len {}\n",len);

    info := recv_var<XSetupInfo>(&win.sock);

    recv_clear_arr(&win.sock,buf,info.vendor_size);

    log("vendor {}\n",str_from_array(buf),info.vendor_size);
}

func authenticate(win: OSWindow@) bool
{
    buf := &win.buf;

    build_auth_packet(buf);

    // actually send the packet
    send_array(&win.sock,buf);

    // recv back our data
    rc := recv_var<u8>(&win.sock);

    constant AUTH_SUCCESS : u32 = 1;

    switch(rc)
    {
        case AUTH_SUCCESS:
        {
            log("connected to x server:\n");
            read_setup_info(win);
        }

        default:
        {
            return true;
        }
    }

    return false;
}

func create_window(win : OSWindow@, x : u32, y : u32) bool
{
    return false;
}

func os_create_window(str : const string, x : u32, y : u32) OSWindow 
{
    win : OSWindow;

    // open connection to x server
    win.sock = connect_unix_domain("/tmp/.X11-unix/X0");

    if(!socket_valid(&win.sock))
    {
        crash_and_burn("window socket not valid");
    }


    if(authenticate(&win))
    {
        crash_and_burn("could not authenticate to server");
    }


    if(create_window(&win,x,y))
    {
        crash_and_burn("could not create window");
    }

    return win;
}

func os_destroy_window(win : OSWindow@)
{
    destroy_array(&win.buf);
    close_sock(&win.sock);
}

func open_window(str : const string, x : u32, y : u32) Window
{
    win : Window;
    win.width = x;
    win.height = y;

    win.os_win = os_create_window(str,x,y);

    return win;
}

func close_window(win : Window@)
{
    os_destroy_window(&win.os_win);
}