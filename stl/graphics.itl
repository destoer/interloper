struct Window
{
    width : u32;
    height : u32;

    os_win : OSWindow;
}

// TODO: move this later
import <socket>

constant X11_PREFIX : string = "[X WINDOW]: ";

// TODO: namespace this lot under x11::

// https://www.x.org/releases/X11R7.5/doc/x11proto/proto.pdf
struct OSWindow
{
    // protocol buffer
    buf : Array;

    sock : Socket;

    root_win : u32;
    screen_x : u32;
    screen_y : u32;

    window_id : u32;

    seq_count : u32;

    resource_base : u32;
    resource_mask : u32;
    resource_id: u32;
}

func alloc_resource(win: OSWindow@) u32
{
    id := win.resource_id;
    win.resource_id += 1;

    return (id & win.resource_mask) | win.resource_base;
}

func pad_x11(E : u32) u32
{
    return (4 - (E & 3)) & 3;
}

func send_req<T>(win : OSWindow@, v : const T@)
{
    send_var<T>(&win.sock,v);
    win.seq_count += 1;
}

func build_auth_packet(buf: Array@)
{
    // reset our working buffer
    clear_array(buf);

    // build initial authentication packet

    // byte order 
    if(LITTLE_ENDIAN)
    {
        push_u8(buf,'l');
    }

    else
    {
        push_u8(buf,'B');
    }


    // unused
    push_u8(buf,0x0);

    // version 11.0
    push_u16(buf,11);
    push_u16(buf,0);

    // no authentication no strings
    push_u32(buf,0);

    // pad
    push_u32(buf,0);
}

func read_x11_reply(win: OSWindow@, size : u32)
{
    // get our specified bytes
    recv_clear_arr(&win.sock,&win.buf,size);
}



#attr(no_reorder)
struct XSetupInfo
{
    release : u32;
    resource_id_base : u32;
    resource_id_mask : u32;
    motion_buffer_size : u32;
    vendor_size : u16;
    max_req_len : u16;
    screen_count : u8;
    format_size : u8;
    image_order  : u8;
    bitmap_order : u8;
    bitmap_scanline_fmt_unit : u8;
    bitmap_format_scanline_pad : u8;
    min_keycode : u8;
    max_keycode : u8;
    pad1 : u32;
};

#attr(no_reorder)
struct XFormat
{
    depth : u8;
    bpp : u8;
    scanline_pad : u8;
    pad1 : u8[5];
};

#attr(no_reorder)
struct XScreen
{
    root : u32;
    colour_map : u32;
    white : u32;
    black : u32;
    input_mask : u32;
    width : u16;
    height : u16;
    width_m : u16;
    height_m : u16;
    min_map : u16;
    max_map : u16;
    root_visual : u32;
    backing_store : u8;
    save_under : u8;
    root_depth : u8;
    depth_count : u8;
}

#attr(no_reorder)
struct XDepth
{
    depth : u8;
    pad1 : u8;
    vis_size : u16;
    pad2 : u32;
}

#attr(no_reorder)
struct XVisualType
{
    id : u32;
    class : u8;
    bpr: u8;
    map_entires : u16;
    red_mask : u32;
    green_mask : u32;
    blue_mask : u32;
    pad1 : u32;
}

#attr(no_reorder)
struct XQueryTree
{
    opcode : u8 = 15;
    pad1 : u8;
    len: u16 = 2;
    window: u32;
}

func query_tree(win: OSWindow@, root : u32)
{
    query : XQueryTree;
    query.window = root;

    send_var<XQueryTree>(&win.sock,&query);
}

func read_setup_info(win: OSWindow@)
{
    buf := &win.buf;

    recv_ignore(&win.sock,1);

    // read in our first batch of data
    read_x11_reply(win,6);

    log(X11_PREFIX,"version {}.{}\n",read_buffer<u16>(buf,0),read_buffer<u16>(buf,2));

    len : u32 = read_buffer<u16>(buf,4) * 4;

    log(X11_PREFIX,"len {}\n",len);

    info := recv_var<XSetupInfo>(&win.sock);

    log(X11_PREFIX,"big endian bitmap order: {}\n",cast(bool,info.bitmap_order));

    read_x11_reply(win,info.vendor_size);
    log(X11_PREFIX,"vendor {}\n",str_from_array(buf),info.vendor_size);

    recv_ignore(&win.sock,pad_x11(info.vendor_size));

    log(X11_PREFIX,"resource {b} : {b}\n\n",info.resource_id_base,info.resource_id_mask);

    win.resource_base = info.resource_id_base;
    win.resource_mask = info.resource_id_mask;

    for(i in 0 < info.format_size)
    {
        fmt := recv_var<XFormat>(&win.sock);
        
        log(X11_PREFIX,"format {}\n",i);
        log(X11_PREFIX,"depth {}\n",fmt.depth);
        log(X11_PREFIX,"bits per pixel {}\n",fmt.bpp);
        log(X11_PREFIX,"scanline pad {}\n\n",fmt.scanline_pad);
    }

    for(i in 0 < info.screen_count)
    {
        screen := recv_var<XScreen>(&win.sock);
        log(X11_PREFIX,"screen {}\n",i);
        log(X11_PREFIX,"root {}\n",screen.root);
        log(X11_PREFIX,"measurements {}mm : {}mm\n",screen.width_m,screen.height_m);
        log(X11_PREFIX,"dimensions {} : {}\n\n",screen.width, screen.height);

        // default this to first screen
        if(i == 0)
        {
            win.screen_x = screen.width;
            win.screen_y = screen.height;
            win.root_win = screen.root;
        }

        // read out each depth
        for(d in 0 < screen.depth_count)
        {
            depth := recv_var<XDepth>(&win.sock);

            log(X11_PREFIX,"depth {}\n\n",depth.depth);

            for(v in 0 < depth.vis_size)
            {
                visual_type := recv_var<XVisualType>(&win.sock);

                log(X11_PREFIX,"id {}\n",visual_type.id);
                log(X11_PREFIX,"class {}\n",visual_type.class);
                log(X11_PREFIX,"bpr {}\n\n",visual_type.bpr); 
            }
        }
    }

}

func authenticate(win: OSWindow@) bool
{
    buf := &win.buf;

    build_auth_packet(buf);

    // actually send the packet
    send_array(&win.sock,buf);

    // recv back our data
    rc := recv_var<u8>(&win.sock);

    constant AUTH_SUCCESS : u32 = 1;

    switch(rc)
    {
        case AUTH_SUCCESS:
        {
            log(X11_PREFIX,"connected to x server:\n");
            read_setup_info(win);
        }

        default:
        {
            return true;
        }
    }

    return false;
}

#attr(no_reorder)
struct XCreateWindow
{
    opcode : u8 = 1;
    depth : u8;
    req_len : u16;
    window : u32;
    parent : u32;
    x : s16;
    y : s16;
    width : u16;
    height : u16;
    border_width : u16;
    class : u16;
    visual_id : u16;
    value_mask : u32;
}

#attr(no_reorder)
struct XCreateNotify
{
    code : u8;
    pad1 : u8;
    seq : u16;
    parent : u32;
    window : u32;
    x : s16;
    y : s16;
    width : u16;
    height : u16;
    border_width : u16;
    override_redirect : u8;
    pad2 : u8[9];
}

#attr(no_reorder)
struct XMapWindow
{
    code : u8 = 8;
    pad1 : u8 = 0;
    len : u16 = 2;
    window : u32;
}

func x11_req_len(len : u64) u16
{
    return cast(u16,len / 4);
}

func map_window(win : OSWindow@, id : u32)
{
    map : XMapWindow;
    map.window = id;

    send_req<XMapWindow>(win,&map);
}

#attr(no_reorder)
struct XDestroyWindow
{
    code : u8 = 4;
    pad1: u8 = 0;
    len : u16 = 2;
    window : u32;
}

// TODO: we need namspacing 
func x11_destroy_window(win : OSWindow@, id : u32)
{
    destroy : XDestroyWindow;
    destroy.window = id;

    send_req<XDestroyWindow>(win,&destroy);
}

func proccess_reply(win : OSWindow@)
{
    // TODO: we probably want to peek this...
    rc := recv_var<u8>(&win.sock);

    print("rc {}\n",rc);
    assert(false);
}

constant WINDOW_CLASS_INPUT_OUTPUT : u16 = 1;

#attr(flag)
enum window_create_flag : u32
{
    background_pixmap,
    background_pixel,
    border_pixmap,
    border_pixel,
    bit_gravity,
    win_gravity,
    backing_store,
    backing_planes,
    backing_pixel,
    override_redirect,
    save_under,
    event_mask,
    do_not_propagate,
    colour_map,
    cursor,
}

#attr(flag)
enum event_flag : u32
{
    key_press,
    key_release,
    button_press,
    button_release,
    enter_window,
    leave_window,
    pointer_motion,
    pointer_motion_hint,
    button1_motion,
    button2_motion,
    button3_motion,
    button4_motion,
    button5_motion,
    button_motion,
    key_map_state,
    exposure,
    visibility_change,
    structure_notify,
    resize_redirect,
    substructure_notify,
    substructure_redirect,
    focus_change,
    property_change,
    colour_map_change,
    owner_grab_button,
}

func create_window(win : OSWindow@, x : u32, y : u32) bool
{
    // allocate a an id and save it
    win.window_id = alloc_resource(win);
/*
    log(X11_PREFIX,"window id: {}\n",win.window_id);

    // build end list
    buf := &win.buf;
    clear_array(buf);

    // first the events we want to listen for
    events : u32 = event_flag::structure_notify;
    push_u32(buf,events);

    // attempt to get a rgba window
    win_req : XCreateWindow;
    win_req.req_len = x11_req_len(sizeof_data(XCreateWindow) + buf.size);

    win_req.window = win.window_id;

    // rgb888
    win_req.depth = 24;

    win_req.class = WINDOW_CLASS_INPUT_OUTPUT;

    // set root as parent
    win_req.parent = win.root_win;

    win_req.x = cast(s16,win.screen_x / 2);
    win_req.y = cast(s16,win.screen_y / 2);

    
    win_req.width = cast(u16,x);
    win_req.height = cast(u16,y);

    // TODO: dont know how large this should be
    // but we want visual confirmation
    win_req.border_width = 20;

    // mark what window settings we want to change
    win_req.value_mask |= window_create_flag::event_mask;

    // send the main request
    send_req<XCreateWindow>(win,&win_req);
    
    // send end list
    send_array(&win.sock,buf);

    // now map in the window
    map_window(win,win.window_id);
*/

    // even a basic query isn't getting me a reply?
    // why?
    query_tree(win,win.root_win);

    proccess_reply(win);

    return false;
}

func os_open_window(str : const string, x : u32, y : u32) OSWindow 
{
    win : OSWindow;

    // open connection to x server
    win.sock = connect_unix_domain("/tmp/.X11-unix/X0");

    if(!socket_valid(&win.sock))
    {
        crash_and_burn("window socket not valid");
    }


    if(authenticate(&win))
    {
        crash_and_burn("could not authenticate to server");
    }


    if(create_window(&win,x,y))
    {
        crash_and_burn("could not create window");
    }

    return win;
}

func os_destroy_window(win : OSWindow@)
{
    // destroy all resources
    x11_destroy_window(win,win.window_id);

    // close down our socket and free our working buffer
    destroy_array(&win.buf);
    close_sock(&win.sock);
}

func open_window(str : const string, x : u32, y : u32) Window
{
    win : Window;
    win.width = x;
    win.height = y;

    win.os_win = os_open_window(str,x,y);

    return win;
}

func close_window(win : Window@)
{
    os_destroy_window(&win.os_win);
}