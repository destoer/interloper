namespace std;

struct Arena
{
    buf : byte[];

    // how much of the arena have we used
    len : usize;
}


func make_arena(buf : byte[]) Arena
{
    arena : Arena = {?};

    arena.len = 0;
    arena.buf = buf;

    return arena;
}

func alloc_arena(arena : Arena@, size : usize) byte@
{
    // allocation failed
    if(arena.len + size >= arena.buf.len)
    {
        return NULL;
    }

    alloc_ptr : byte@ = &arena.buf[arena.len];
    arena.len += size;

    return alloc_ptr;    
}

func alloc_arena_panic(arena : Arena@, size : usize) byte@
{
    ptr := alloc_arena(arena,size);

    if(!ptr)
    {
        crash_and_burn("out of memory for arena alloc {} {} {}\n",arena.buf.len,arena.len,size);
    }

    return ptr;
}