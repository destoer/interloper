namespace std;

// NOTE: abstracts away bottom level os primitives

constant SYSCALL_READ : u32 = 0;
constant SYSCALL_WRITE : u32 = 1;
constant SYSCALL_OPEN : u32 = 2;
constant SYSCALL_CLOSE : u32 = 3;
constant SYSCALL_LSEEK : u32 = 8;

constant SYSCALL_EXIT : u32 = 60;
constant SYSCALL_BRK : u32 = 12;

constant SYSCALL_TIME : u32 = 201;
constant SYSCALL_TIME_OF_DAY: u32 = 96;
constant SYSCALL_NANOSLEEP : u32 = 35;

constant SYSCALL_SOCKET : u32 = 41;
constant SYSCALL_CONNECT : u32 = 42;

constant SYSCALL_IOCTL: u32 = 16;
constant SYSCALL_FCNTL: u32 = 72;
constant SYSCALL_SENDTO: u32 = 44;

// memory

// NOTE: we need to declare this first so that any file handles can alloc memory
// globals are intialized in declaration order
global current_os_brk : byte? = brk(NULL);

func brk(ptr : byte?) byte?
{
    return cast(byte?,intrin_syscall(SYSCALL_BRK,ptr,0,0));
}

func os_req_mem(size : usize) byte?
{
    // this is basically just a bump allocator
    old := current_os_brk;

    current_os_brk += size;
    current_os_brk = brk(current_os_brk);

    return old;
}

// STD IO


import <file>

global stdout : File = open_stdout();
global stdin : File = open_stdin();

func open_stdout() File
{
    [fp,err] := open_file("/dev/stdout",file_mode::write,file_opt::open);

    if(err)
    {
        exit(FAILURE_OPEN_STDOUT);
    }

    fp.flags = fp.flags | file_flag::line_buffer;
    return fp;
}

func open_stdin() File
{
    [fp,err] := open_file("/dev/stdin",file_mode::read,file_opt::open);

    if(err)
    {
        exit(FAILURE_OPEN_STDIN);
    }

    return fp;
}

func write_str_raw(data : const c8@, len : usize)
{
    if(!global_setup)
    {
        std::exit(0xbb);
    }

    if(len == 0)
    {
        return;
    }

    else if(!data)
    {
        write_file_str(&stdout,"NULL");
    }

    else
    {
        write_file_mem(&stdout,data,len);
    }   
}


func write_string(str: const string)
{
    if(!global_setup)
    {
        std::exit(0xbb);
    }

    if(str.len == 0)
    {
        return;
    }

    else if(!str.data)
    {
        write_file_str(&stdout,"NULL");
    }

    else
    {
        write_file_str(&stdout,str);
    }
}

func read_line(str : string) string
{
    // if we are going to request input
    // flush any stdout so we get our prompt
    if(stdout.buffer_size)
    {
        flush_write(&stdout);
    }

    [str,rc] := read_file_line(&stdin,str);

    if(rc != file_read_res::success)
    {
        crash_and_burn("Failed to read from stdin!?");
    }

    return str;
}


// PROCESS
func at_exit()
{
    // heap_usage(&global_heap);

    // close_file(&stdin);
    // close_file(&stdout);
}

func exit(exit_code: s32)
{
    at_exit();
    intrin_syscall(SYSCALL_EXIT,exit_code,0,0);
}

// FILE IO

constant OS_INVALID_READ : s64 = -1;

// NOTE: this is expecting a null terminated string
func os_open(filename : const c8@, mode : file_mode, opt : file_opt) byte@
{
    // convert our high level enums to an os flag
    os_flag : u32 = 0;

    constant OS_OPEN_READ_ONLY: u32 = 0;
    constant OS_OPEN_WRITE_ONLY: u32 = 1;
    constant OS_OPEN_CREATE : u32 = 0x40;
    constant OS_OPEN_APPEND : u32 = 0x400;

    switch(mode)
    {
        case file_mode::read:
        {
            os_flag = OS_OPEN_READ_ONLY;
        }
    
        case file_mode::write:
        {
            os_flag = OS_OPEN_WRITE_ONLY;
        }
    }

    switch(opt)
    {
        case file_opt::open:
        {

        }

        case file_opt::create:
        {
            os_flag |= OS_OPEN_CREATE;
        }

        case file_opt::append:
        {
            os_flag |= OS_OPEN_APPEND;
        }
    }


    return cast(byte@,intrin_syscall(SYSCALL_OPEN,filename,os_flag));
}

func os_close(handle : const byte@)
{
    intrin_syscall(SYSCALL_CLOSE,handle);
}

func os_write(handle : const byte@, data : const byte@, len : usize) s64
{
    return intrin_syscall(SYSCALL_WRITE,handle,data,len);
}

func os_write_str_raw(data : const byte@, len : usize) s64
{
    return os_write(cast(byte@,1),data,len);
}

func os_write_str(str: const string) s64
{
    return os_write_str_raw(str.data,str.len);
}

func os_read(handle : const byte@, data : byte@, len : usize) s64
{
    return intrin_syscall(SYSCALL_READ,handle,data,len);
}

constant SEEK_CUR : u32 = 1;

func lseek(handle : const byte@, seek : u32, offset : s64) s64
{
    return intrin_syscall(SYSCALL_LSEEK,handle,offset,seek);
}

func os_seek(handle : const byte@, seek : file_seek_mode, offset : s64) s64
{
    // i.e this is allready in the native format
    // start -> 0
    // cur -> 1
    // end -> 2
    return lseek(handle,cast(u32,seek),offset);
}

func os_tell(handle : const byte@) s64
{
    return lseek(handle,SEEK_CUR,0);
}

constant INVALID_FILE_HANDLE : s64 = -1;

func is_os_handle_valid(handle : byte@) bool
{
    return cast(s64,handle) >= 0;
}


func time() s64
{
    x : s64 = 0;
    intrin_syscall(SYSCALL_TIME,&x);

    return x;
}

#attr(no_reorder)
struct TimeVal
{
    sec : s64;
    usec : s64;
}

func os_timestamp_ms() f64
{
    time : TimeVal;
    intrin_syscall(SYSCALL_TIME_OF_DAY,&time,NULL);

    ms := (cast(f64,time.sec) * 1000.0) + (cast(f64,time.usec) / 1000.0);

    //std::print("time {} {} {}\n",ms,time.sec,time.usec);

    return ms;
}

struct TimeSpec
{
    sec : s64;
    nsec : s64;
}

func os_sleep_ms(ms : u64)
{
    spec : TimeSpec;
    spec.sec = ms / MS_TO_SEC;
    spec.nsec = (ms % MS_TO_SEC) * MS_TO_NSEC;
    intrin_syscall(SYSCALL_NANOSLEEP,&spec,NULL);
} 


// networking

constant AF_UNIX : u16 = 1;
constant AF_INET : u16 = 2;
constant SOCK_STREAM : u16 = 1;
constant SOCK_DGRAM : u16 = 2;

constant INVALID_SOCKET_HANDLE : s64 = -1;

#attr(no_reorder)
struct SockAddrIn 
{
    family : u16 = 0;
    port : u16 = 0;
    addr : u32 = 0;
    pad : u8[8] = {?};
};

#attr(no_reorder)
struct SockAddrUn
{
    family : u16 = 0;
    path : c8[92] = {?};
};

func linux_socket(domain: u32, type: u32, protocol : u32) s64
{
    return intrin_syscall(SYSCALL_SOCKET,domain,type,protocol);
}

func linux_connect(handle : s64,addr : byte@,size : u32) s64
{
    return intrin_syscall(SYSCALL_CONNECT,handle,addr,size);
}

func connect_unix_domain(name : const string) net::Socket
{
    sock : net::Socket;

    // open socket
    handle := linux_socket(AF_UNIX,SOCK_STREAM,0);

    sock.handle = cast(byte@,handle);

    // open connection
    addr : SockAddrUn;
    zero_mem(&addr,sizeof(addr));

    addr.family = AF_UNIX;

    // copy the string and null terminate it
    str_copy_term(addr.path,name);

    // check connection is fine
    if(linux_connect(handle,&addr,sizeof_type(SockAddrUn)) != 0)
    {
        os_close(sock.handle);
        sock.handle = cast(byte@,INVALID_SOCKET_HANDLE);
    }

    return sock;
}

constant FIONREAD : u32 = 0x0000_541B;

func linux_ioctl(fd : s64,type: u32, param: byte@) s64
{
    return intrin_syscall(SYSCALL_IOCTL,fd,type,param);
}

func linux_fcntl(fd : s64,type: u32, param: byte@) s64
{
    return intrin_syscall(SYSCALL_FCNTL,fd,type,param);
}

func os_socket_has_data(socket: net::Socket@) bool
{
    len : s32;
    linux_ioctl(cast(s64,socket.handle),FIONREAD,&len);

    return len > 0;
}

func os_connect(ip: const string, port: u16, type: net_type) byte@
{
    handle : s64 = INVALID_SOCKET_HANDLE;

    switch(type)
    {
        case net_type::tcp:
        {
            // get a socket descriptor
            handle = linux_socket(AF_INET,SOCK_STREAM,0);
        }

        case net_type::udp:
        {
            // get a socket descriptor
            handle = linux_socket(AF_INET,SOCK_DGRAM,0);
        }
    }

    // couldn't even open the socket we are done
    if(handle < 0)
    {
       return cast(byte@,INVALID_SOCKET_HANDLE);
    }

    // actually connect
    addr : SockAddrIn;
    zero_mem(&addr,sizeof(addr));

    // fill out our details
    addr.family = AF_INET;
    addr.port = host_to_network_u16(port);

    [addr.addr,err] := ip_to_net_addr(ip);

    if(err)
    {
        os_close(cast(byte@,handle));
        return cast(byte@,INVALID_SOCKET_HANDLE);
    }

    // check connection is fine
    if(linux_connect(handle,&addr,sizeof_type(SockAddrIn)) != 0)
    {
        os_close(cast(byte@,handle));
        return cast(byte@,INVALID_SOCKET_HANDLE);
    }

    // okay we have a connected socket
    // return the linux handle
    return cast(byte@,handle);
}

constant MSG_NOSIGNAL : u32 = 0x4000;

func os_send(socket: net::Socket@,ptr : const byte@, len : usize) s64
{
    return intrin_syscall(SYSCALL_SENDTO,socket.handle,ptr,len,MSG_NOSIGNAL,NULL,NULL);
}

func os_recv(socket: net::Socket@,ptr : byte@, len : usize) s64
{
    return os_read(socket.handle,ptr,len);
}

func os_socket_close(socket: net::Socket@)
{
    os_close(socket.handle);
}


constant KEYCODE_W: u32 = 25;
constant KEYCODE_S: u32 = 39;
constant KEYCODE_D: u32 = 40;
constant KEYCODE_A: u32 = 38;

constant KEYCODE_ESC: u32 = 9;

func os_default_key_map(map: input::button_t[256])
{
    map[KEYCODE_W] = input::button_t::up;
    map[KEYCODE_S] = input::button_t::down;
    map[KEYCODE_D] = input::button_t::right;
    map[KEYCODE_A] = input::button_t::left;

    map[KEYCODE_ESC] = input::button_t::start;
}