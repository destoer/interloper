namespace std;

#attr(no_reorder)
struct HeapNode
{
    canary_start : u64;

    next : HeapNode?;
    prev : HeapNode?;

    // NOTE: inclusive Node
    blocks : u64;

    free: bool;

    canary_end : u64;
}

struct Heap
{
    free_list : HeapNode? = NULL;

    min: HeapNode?;
    max: HeapNode?;

    // NOTE: this is in block counts
    used : u64;
    capacity : u64;
    max_allocation: u64;

    total_allocation_bytes: u64;
}


constant HEAP_DEFAULT_BLOCK_COUNT : u32 = 1024;
constant HEAP_BLOCK_SIZE : u32 = HeapNode.size;
constant HEAP_DEFAULT_ALLOC_SIZE : u32 = HEAP_BLOCK_SIZE * HEAP_DEFAULT_BLOCK_COUNT;

constant HEAP_CANARY_START : u64 = 0xCAFE_DEAD_C0DE_BABE;
constant HEAP_CANARY_END : u64 = 0xFACE_DEAD_FEED_CAFE;

func heap_duplicate(heap: Heap@, data: const byte@, size: usize) byte@
{
    buffer := alloc_heap_panic(heap,size,sizeof_type(byte));
    memcpy(buffer,data,size);

    return buffer;
}

func usable_blocks(heap: const Heap@) u64
{
    return (heap.capacity - heap.used);
}

func heap_usage(heap: const Heap@)
{
    print("heap usage:\n");
    print("used: {}\n",heap.used * HEAP_BLOCK_SIZE);
    print("capacity: {}\n",heap.capacity * HEAP_BLOCK_SIZE);
    print("free: {}\n",usable_blocks(heap) * HEAP_BLOCK_SIZE);
    print("total allocation bytes: {}",heap.total_allocation_bytes);

    putchar('\n');
}

func print_heap(heap: const Heap@)
{
    cur := heap.free_list;

    if(!cur)
    {
        return;
    }

    // TODO: need to work on rtti so we dont need casts for this
    while(cur)
    {
        print("node {} : {x} -> {}\n",cast(byte@,cur),cur.blocks,cast(byte@,cur.next));
        cur = cur.next;
    }
}

func verify_node(heap: const Heap@,node: const HeapNode@)
{
    if(!node)
    {
        return;
    }

    if(node.blocks > heap.capacity)
    {
        crash_and_burn("Blocks exceeded on node {} {}",cast(byte@,node),heap.capacity);
    }

    if(node > heap.max || node < heap.min)
    {
        // TODO: need to work on rtti so we dont need casts for this
        crash_and_burn("[HEAP]: node {} is out of range: {} : {}",
            cast(byte@,node),cast(byte@,heap.min),cast(byte@,heap.max));
    }

    if(node.canary_start != HEAP_CANARY_START || node.canary_end != HEAP_CANARY_END) 
    {
        crash_and_burn("[HEAP]: node {} : {x} canary trashed {x} : {x} -> {x} : {x}",
            cast(byte@,node),node.blocks,HEAP_CANARY_START,HEAP_CANARY_END,node.canary_start,node.canary_end);
    }
}

func verify_heap(heap: const Heap@)
{
    cur := heap.free_list;

    if(!cur)
    {
        return;
    }

    prev : HeapNode@ = NULL;

    while(cur)
    {
        if(cur.prev != prev)
        {
            crash_and_burn("Prev does not match on heap: {}",cast(byte@,cur));
        }

        verify_node(heap,cur);
        prev = cur;
        cur = cur.next;
    }
}

func free_heap(heap : Heap@, ptr : byte@@)
{
    if(!@ptr)
    {
        return;
    }

    verify_heap(heap);

    // block info is behind the buffer
    node := cast(HeapNode@,@ptr) - 1;

    if(node.blocks > heap.max_allocation)
    {
        crash_and_burn("Node exceeds max allocation {} {} {}",cast(byte@,node),node.blocks,heap.max_allocation);
    }

    // set our ptr to null
    @ptr = NULL;

    // actually add it back to the free list
    node.free = true;
    heap.used -= node.blocks;

    next := node.next;

    // attempt to collapse upper
    if(next && next.free && (node + node.blocks) == next)
    {
        node.blocks += next.blocks;

        // Link over next
        node.next = next.next;

        // Link prev of new next
        if(node.next)
        {
            node.next.prev = node;
        }
    }
    
    prev := node.prev;

    // Attempt to collapse lower
    if(prev && prev.free && (prev + prev.blocks) == node)
    {
        prev.blocks += node.blocks;

        // Link over node
        prev.next = node.next;

        // Link back prev of node next
        if(prev.next) 
        {
            prev.next.prev = prev;
        }
    }
}

func request_buffer(heap : Heap@, size : usize) bool
{
    ptr := os_req_mem(size);

    if(ptr == cast(byte@,OS_INVALID_PTR))
    {
        return false;
    }

    add_buffer(heap,ptr,size);
    return true;
}

func find_first_fit(heap: Heap@, req_blocks: usize) HeapNode@
{
    cur := heap.free_list;

    while(cur)
    {
        if(cur.blocks >= req_blocks && cur.free)
        {
            return cur;
        }

        cur = cur.next;
    }

    return NULL;
}

func alloc_heap(heap : Heap@, count : usize, size : usize) byte?
{
    verify_heap(heap);

    bytes := count * size;

    req_blocks := ((bytes + HEAP_BLOCK_SIZE - 1) / HEAP_BLOCK_SIZE) + 1;


    cur := find_first_fit(heap,req_blocks);

    if(!cur)
    {
        req := max_u64(req_blocks * HEAP_BLOCK_SIZE,HEAP_DEFAULT_ALLOC_SIZE);

        // out of memory try get some more
        if(!request_buffer(heap,req))
        {
            return NULL;
        }
        
        cur = find_first_fit(heap,req_blocks);

        if(!cur)
        {
            return NULL;
        }
        
    }

    if(cur.blocks == req_blocks)
    {
        cur.free = false;
    }

    else if(cur.blocks >= req_blocks)
    {
        new := cur;

        remain := cur.blocks - req_blocks;

        // fragment the block
        cur.blocks = req_blocks;
        cur.free = false;

        new += cur.blocks;
        new.blocks = remain;
        new.free = true;

        new.canary_start = HEAP_CANARY_START;
        new.canary_end = HEAP_CANARY_END;

        // Point new block at its neighbours
        new.prev = cur;
        new.next = cur.next;

        // Repoint the surrounding blocks
        if(new.next)
        {
            new.next.prev = new;
        }

        cur.next = new;
    }

    // mark heap usage
    heap.used += cur.blocks;
    heap.total_allocation_bytes += size;
    heap.max_allocation = max_u64(heap.max_allocation,cur.blocks);
    
    return cur + 1;
}

func realloc_heap(heap : Heap@, ptr: byte@@, count: usize,size: usize) bool
{
    // get the actual data pointer
    old := @ptr;

    // first alloc just behave like alloc
    if(!old)
    {
        @ptr = alloc_heap(heap,count,size);
        return @ptr == NULL;
    }


    // TODO: make this check if we can just extend the old block
    // rather than just allways requesting we get a new one...
    new := alloc_heap(heap,count,size);

    // failed to get a new buffer just back out
    // and leave the old one in place
    if(!new)
    {
        return true;
    }

    // copy over the old data to the new buffer
    node := cast(HeapNode@,old) - 1;

    // need to make sure we dont trash the buffer if this shrinks
    copy_size := min_u64((node.blocks - 1) * HEAP_BLOCK_SIZE,count * size);

    memcpy(new,old,copy_size);

    // free up the data
    free_heap(heap,ptr);

    // actually overwrite the old pointer
    @ptr = new;

    return false;
}

func realloc_heap_panic(heap : Heap@, ptr: byte@@, count: usize,size: usize)
{
    if(realloc_heap(heap,ptr,count,size))
    {
        crash_and_burn("out of memory for heap realloc: {} : {}\n",count,size);
    }
}


func alloc_heap_panic(heap : Heap@, count : usize, size : usize) byte@
{
    ptr := alloc_heap(heap,count,size);

    if(!ptr)
    {
        crash_and_burn("out of memory for heap alloc: {} : {}\n",count,size);
    }

    return ptr;
}


func add_heap_block(heap : Heap@, node: HeapNode@)
{
    cur := heap.free_list;

    // Handle insertion at start
    if(!cur)
    {
        heap.free_list = node;
        return;
    }

    // just insert at end
    while(cur.next)
    {
        cur = cur.next;
    }

    cur.next = node;
    node.prev = cur;
}

func add_buffer(heap : Heap@, ptr : byte@, size : usize)
{
    if(!ptr)
    {
        return;
    }

    // NOTE: we need a block to actually store it
    blocks := (size / HEAP_BLOCK_SIZE);

    node := cast(HeapNode@,ptr);
    node.blocks = blocks;
    node.next = NULL;
    node.prev = NULL;
    node.free = true;

    node.canary_start = HEAP_CANARY_START;
    node.canary_end = HEAP_CANARY_END;

    // new memory added
    heap.capacity += blocks;

    if(node < heap.min)
    {
        heap.min = node;
    }

    end := node + node.blocks;

    if(end > heap.max)
    {
        heap.max = end;
    }

    // directly pass new block
    add_heap_block(heap,node); 

    verify_heap(heap); 
}

func make_heap(buf : byte[]) Heap
{
    heap : Heap;
    add_buffer(&heap,buf.data,buf.len);

    return heap;
}