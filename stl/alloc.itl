

struct Arena
{
    buf : byte[];

    // how much of the arena have we used
    len : u32;
}


func make_arena(buf : byte[]) Arena
{
    arena : Arena;

    arena.len = 0;
    arena.buf = buf;

    return arena;
}

func allocate(arena : Arena@, size : u32) byte@
{
    // allocation failed
    if(arena.len + size >= arena.buf.len)
    {
        return NULL;
    }

    alloc_ptr : byte@ = &arena.buf[arena.len];
    arena.len += size;

    return alloc_ptr;    
}

// TODO: this needs templates
func make_array(arena : Arena@, size: u32) byte[]
{
    buf : byte[];

    // TODO: this needs to use the type size
    bytes := size;

    ptr := allocate(arena,bytes);

    if(ptr == NULL)
    {
        crash_and_burn("Failed to allocate memory from arena: {}\n",bytes);
    }

    buf.data = ptr;
    buf.len = size;

    return buf;
}
