namespace log

struct LogLevelData
{
    name: const string;
}

enum log_level : LogLevelData
{
    none = {"none"},
    error = {"error"},
    warn = {"warn"},
    info = {"info"},
    debug = {"debug"},
    trace = {"trace"},
}


global max_log_level: log_level = log_level::info;

func set_log_level_from_env(env_name: const string)
{
    str := std::getenv(env_name);

    if(!str)
    {
        max_log_level = log_level::error;
        return;
    }

    for raw_level in 0 < log_level.len 
    {
        level := cast(log_level,raw_level);

        if(std::str_equal(str,level.name))
        {
            max_log_level = level;
        }
    }
}

func log(level: log_level,prefix: const string,fmt: const string, args : const rtti::Any[])
{
    if(cast(u32,level) <= cast(u32,max_log_level))
    {
        std::print("[{} {}]: ",level.name,prefix);
        std::print_args(fmt,args);
        std::linefeed();
    }
}

func error(prefix: const string,fmt: const string, args : ...) 
{
    log(log_level::error,prefix,fmt,args);
}

func warn(prefix: const string,fmt: const string, args : ...) 
{
    log(log_level::warn,prefix,fmt,args);
}

func info(prefix: const string,fmt: const string, args : ...) 
{
    log(log_level::info,prefix,fmt,args);
}

func debug(prefix: const string,fmt: const string, args : ...) 
{
    log(log_level::debug,prefix,fmt,args);
}

func trace(prefix: const string,fmt: const string, args : ...) 
{
    log(log_level::trace,prefix,fmt,args);
}
