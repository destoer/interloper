

func memcpy(dst: byte@, src: const byte@, size: u64)
{
    end : const byte@ = dst + size;

    // just do a simple copy for now
    while(dst != end)
    {
        @dst = @src;
        dst += 1;
        src += 1;
    }
}


func zero_mem(dst: byte@, size : u64)
{
    end : const byte@ = dst + size;

    while(dst != end)
    {
        @dst = 0;
        dst += 1;
    }  
}

func zero_var<T>(dst: T@)
{
    zero_mem(dst,sizeof_type(T));
}

func handle_read<T>(src: const byte@) T
{
    return @cast(T@,src);
}

// TODO: we need to expose an intrin?
/*
    #if INTRIN_BSWAP
        return intrin_bswap(v);
    #endif
*/

func bswap<T>(v : T) T
{
    buf := cast(byte@,&v);

    for(i in 0 < sizeof_type(T) / 2)
    {
        // swap opposing ends
        swap<byte>(buf + i,buf + (sizeof_type(T) - i - 1));
    }

    return v;
}

func host_to_network<T>(v : T) T
{
    // if we are on little endian we need to do a byteswap
    if(LITTLE_ENDIAN)
    {
        return bswap<T>(v);
    }

    // we allready have variables in a native order!
    return v;
}