namespace std;

func memcpy(dst: byte@, src: const byte@, size: usize)
{
    end : const byte@ = dst + size;

    // just do a simple copy for now
    while(dst != end)
    {
        @dst = @src;
        dst += 1;
        src += 1;
    }
}


func zero_mem(dst: byte@, size : usize)
{
    end : const byte@ = dst + size;

    while(dst != end)
    {
        @dst = 0;
        dst += 1;
    }  
}


// TODO: we need to expose an intrin?
/*
    #if INTRIN_BSWAP
    {
        return intrin_bswap(v);
    }
*/

func bswap_u16(v: u16) u16
{
    return (v >> 8) | ((v & 0xff) << 8);
}

func host_to_network_u16(v : u16)
{
    // if we are on little endian we need to do a byteswap
    if(LITTLE_ENDIAN)
    {
        return bswap_u16(v);
    }

    // we allready have variables in a native order!
    return v;
}
