namespace std

struct ItlContext
{
    env_vars: std::HashTable;
    heap: std::Heap;
}

func read_proc_file(name: const string) [std::Array, result]
{
    [file, err] := open_file(name,std::file_mode::read,std::file_opt::open);

    buffer := std::make_array(sizeof_type(byte));

    if(err)
    {
        return buffer, result::err;
    }


    // Keep buffering the file until we hit an error or run out of stuff to read
    while(true) 
    {
        reserve_array_mem(&buffer,FILE_DEFAULT_BUFFER_SIZE);
        [len, res] := os_read(file.handle,array_end(&buffer),FILE_DEFAULT_BUFFER_SIZE);

        if(res == result::err || len == 0)
        {
            return buffer, result::ok;
        }

        buffer.buf.len += len;
    }

    return buffer,result::err;
}

func parse_keys(table: HashTable@, env: const string)
{
    for [@v, i] in env
    {
        if(@v == '=')
        {
            key := str_duplicate(env[:i]);
            value := str_duplicate(env[i+1:]);

            hash_table_add(table,&key,&value);
            return;
        }
    }

    blank: string;
    key := str_duplicate(env);

    // No key found just put the variable itself
    hash_table_add(table,&key,&blank);
}

func read_env()
{
    [bin, err] := read_proc_file("/proc/self/environ");

    if(err == result::err)
    {
        crash_and_burn("Could not read environment variables");
    }

    // Now have a list of null terminated strings.
    // Lets split them.

    var_start: u32 = 0;

    for [@v, i] in bin.buf 
    {
        char := @v;

        if(char == 0)
        {
            cur := var_start;
            len := i - cur;

            str: string = {cast(c8@,&bin.buf[cur]),len};
            parse_keys(&itl_context.env_vars,str);

            var_start = i + 1; 
        }
    }

    destroy_array(&bin);
}

func init_itl_context()
{
    itl_context.env_vars = std::make_hash_table(sizeof_type(string),sizeof_type(string),&std::hash_string,&std::hash_cmp_str);
    read_env();
    log::set_log_level_from_env("ITL_LOG");
}

global itl_context: ItlContext = {?};