namespace std;

struct HashNode
{
    key: byte@;
    value: byte@;
}

struct Bucket
{
    node: Array;
}

type_alias HASH_FUNC = func(key: const byte@, size: usize) usize;
type_alias HASH_CMP_FUNC = func(v1: const byte@, v2: const byte@, key_size: u64) bool;

func hash_cmp_mem(v1: const byte@, v2: const byte@, key_size: u64) bool
{
    return mem_equal(v1,v2,key_size);
}

func hash_cmp_str(v1: const byte@, v2: const byte@, key_size: u64) bool
{
    str1 := @cast(string@,v1);
    str2 := @cast(string@,v2);

    return str_equal(str1,str2);
}


func hash_string_func(key: const string, size: usize) usize
{
    // TODO: is splatting chars across the hash with a random number good enough?
    HASH_MAGIC := 0x02579275;

    hash: usize = 0;

    for @v in key 
    {
        hash = (hash * HASH_MAGIC) ^ @v;
    }

    return hash & (size - 1);
}

func hash_string(key_ptr: byte@, size: usize) usize
{
    key := @cast(string@,key_ptr);
    return hash_string_func(key,size);
}

func u64_hash_func(key: u64, size: usize) usize
{
    // TODO: impl a better integer hash func
    hash := key;
    slot := hash & (size - 1); 

    return slot;
}

func hash_u64(key_ptr: byte@, size: usize) usize
{
    key := @cast(u64@,key_ptr);
    return u64_hash_func(key,size);
}

func hash_u32(key_ptr: byte@, size: usize) usize
{
    key := @cast(u32@,key_ptr);
    return u64_hash_func(key,size);
}


struct HashTable
{
    bucket: Array;
    key_size: usize;
    value_size: usize;
    hash_func: HASH_FUNC;
    cmp_func: HASH_CMP_FUNC;
    table_size: usize;
}

func hash_table_new_buckets(size: usize) Array
{
    buckets := make_sized_array(sizeof_type(Bucket),size);
    bucket_array := recast_arr(Bucket,array_buffer(&buckets));

    for @bucket in bucket_array
    {
        bucket.node = make_array(sizeof_type(HashNode));
    }

    return buckets;
}

func make_hash_table(key_size: usize, value_size: usize, hash_func: HASH_FUNC, cmp_func: HASH_CMP_FUNC) HashTable
{
    constant INITIAL_BUCKET_SIZE: usize = 256;

    return HashTable {
        hash_table_new_buckets(INITIAL_BUCKET_SIZE),
        key_size,
        value_size,
        hash_func,
        cmp_func,
        0
    };
}

func hash_table_lookup_bucket(table: const HashTable@,bucket: const Bucket@, key: const byte@) HashNode?
{
    node_array := recast_arr(HashNode,array_buffer(&bucket.node));

    for @node in node_array
    {
        if table.cmp_func(node.key,key,table.key_size)
        {
            return node;
        }
    }

    return NULL;
}

func hash_table_lookup(table: const HashTable@, key: const byte@) byte?
{
    slot := table.hash_func(key,count_array(&table.bucket));
    bucket := cast(Bucket@,array_index(&table.bucket,slot));

    node := hash_table_lookup_bucket(table,bucket,key);

    if node
    {
        return node.value;
    }

    return NULL;
}

func hash_table_contains(table: const HashTable@, key: const byte@) bool
{
    return hash_table_lookup(table,key) != NULL;
}

func rehash(table: HashTable@, new_size: usize)
{
    new_bucket := hash_table_new_buckets(new_size);
    new_bucket_array := recast_arr(Bucket,array_buffer(&new_bucket));

    bucket_array := recast_arr(Bucket,array_buffer(&table.bucket));

    for @bucket in bucket_array
    {
        node_array := recast_arr(HashNode,array_buffer(&bucket.node));

        for @node in node_array
        {
            slot := table.hash_func(node.key,new_size);
            push_array(&new_bucket_array[slot].node,node);
        }

        destroy_array(&bucket.node);
    }

    destroy_array(&table.bucket);
    table.bucket = new_bucket;
}


func hash_table_add(table: HashTable@, key: const byte@, value: const byte@) byte@
{
    bucket_size := count_array(&table.bucket);
    if(table.table_size == bucket_size)
    {
        rehash(table,bucket_size * 2);
    }

    slot := table.hash_func(key,count_array(&table.bucket));

    bucket := cast(Bucket@, array_index(&table.bucket,slot));
    node := hash_table_lookup_bucket(table,bucket,key);

    // key present just memcpy it
    if(node)
    {
        memcpy(node.value,value,table.value_size);
        return node.value;
    }

    // did not exist in bucket add it
    new_node: HashNode = {
        heap_duplicate(&itl_context.heap,key,table.key_size),
        heap_duplicate(&itl_context.heap,value,table.value_size)
    };

    push_array(&bucket.node,&new_node);
    table.table_size += 1;

    return new_node.value;
}

func hash_table_remove(table: HashTable@, key: const byte@) 
{
    slot := table.hash_func(key,count_array(&table.bucket));
    bucket := cast(Bucket@,array_index(&table.bucket,slot));

    node := hash_table_lookup_bucket(table,bucket,key);

    if node
    {
        array_remove_in_place(&bucket.node,cast(HashNode@,node));
        table.table_size -= 1;
    }
}

func destroy_hash_table(table: HashTable@)
{
    bucket_array := recast_arr(Bucket,array_buffer(&table.bucket));

    for @bucket in bucket_array
    {
        node_array := recast_arr(HashNode,array_buffer(&bucket.node));

        for @node in node_array
        {
            free_heap(&itl_context.heap,&node.key);
            free_heap(&itl_context.heap,&node.value);
        }

        destroy_array(&bucket.node);
    }    

    destroy_array(&table.bucket);
    table.table_size = 0;
}