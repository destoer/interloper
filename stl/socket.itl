namespace net;

import <array>

struct Socket
{
    handle: byte? = NULL;
    type: net_type;
}

// TODO: add udp
enum net_type
{
    tcp,
    udp,
}



func ip_to_net_addr(str: const string) [u32,bool]
{
    ip : u32 = 0;
    buf := cast(byte@,&ip);

    // scan each int and shift
    for(i in 0 < 4)
    {
        [value,str] := parse_value(str);
        buf[i] = cast(u8,value.v);

        // nothing left to parse
        if(str.len == 0)
        {
            return ip, false;
        }

        // skip dot
        if(str[0] == '.')
        {
            str.data += 1;
            str.len -= 1;
        }
        
        // this ain't a dotted quad
        else
        {
            return ip, true;
        }
    }

    return ip, false;
}

func socket_valid(sock: const Socket@) bool
{
    if(!sock)
    {
        return false;
    }

    return sock.handle != cast(byte@,INVALID_SOCKET_HANDLE);
}

func connect(ip: const string, port: u16, type: net_type) Socket
{
    return Socket {
        type,
        std::os_connect(ip,port,type)
    };
}


func socket_has_data(sock: Socket@) bool
{
    return std::os_socket_has_data(sock);
}

func listen(port: u32, type: net_type) Socket
{
    unimplemented("hey! listen!");
}

func recv_raw(sock: Socket@, ptr: byte@, size : usize) s64
{
    if(!socket_valid(sock))
    {
        return -1;
    }


    rc := std::os_recv(sock,ptr,size);

    if(rc < 0)
    {
        close_sock(sock);
    }

    return rc;
}

func recv(sock: Socket@, buf : byte[]) s64
{
    return recv_raw(sock,buf.data,buf.len);
}

func recv_ignore(sock: Socket@, size : u32)
{
    for(i in 0 < size)
    {
        v : byte;
        recv_raw(sock,&v,1);
    }
}

func recv_raw_all(sock: Socket@, ptr : byte@, size : usize) s64
{
    to_read := size;

    // keep reading till we have the ammount requested
    while(to_read > 0)
    {
        read := recv_raw(sock,ptr,to_read);

        if(read < 0)
        {
            return -1;
        }

        to_read -= cast(u64,read);
        ptr += cast(u64,read);
    }

    return size;
}

func recv_array_all(sock: Socket@, arr: std::Array@, size: usize) s64
{
    // make sure we can read all this in
    std::reserve_array(arr,size);

    read := recv_raw_all(sock,&arr.buf[arr.buf.len],size);

    if(read == -1)
    {
        return -1;
    }

    arr.buf.len += cast(u64,read);

    // calc the ammount read
    return read;
}

func recv_clear_array(sock: Socket@, arr: std::Array@, size: usize) s64
{
    std::clear_array(arr);

    return recv_array_all(sock,arr,size);
}

func send_raw(sock : Socket@, ptr: const byte@, size : usize) s64
{
    if(!socket_valid(sock))
    {
        return -1;
    }

    rc := std::os_send(sock,ptr,size);

    if(rc < 0)
    {
        close_sock(sock);
    }

    return rc;
}

func send(sock: Socket@, buf: const byte[]) s64
{
    return send_raw(sock,buf.data,buf.len);
}

func send_array(sock: Socket@, arr : const std::Array@) s64
{
    return send(sock,arr.buf);
}

func send_str(sock: Socket@, str: const string) s64
{
    return send(sock,cast(byte[],str));
}


func close_sock(sock: Socket@)
{
    if(!socket_valid(sock))
    {
        return;
    }

    std::os_socket_close(sock);

    sock.handle = cast(byte@,INVALID_SOCKET_HANDLE);
}