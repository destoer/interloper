namespace std;

func byte_arr_heap(heap : Heap@, size : usize) byte[]
{
    buf: byte[];
    buf.data = alloc_heap_panic(&global_heap,size,sizeof_type(byte));
    buf.len = size;

    return buf;
}

func arr_realloc_byte(heap: Heap@, vla: byte@[], size: usize) 
{
    realloc_heap_panic(&global_heap,&vla.data,size,sizeof_type(byte));
    vla.len = size;
}

func destroy_arr_heap_byte(heap : Heap@, vla: byte@[])
{
    free_heap(&global_heap,&vla.data);
    vla.len = 0;
}

func arr_heap_u32(heap : Heap@, size : usize) u32[]
{
    buf: u32[];
    buf.data = cast(u32@,alloc_heap_panic(&global_heap,size,sizeof_type(u32)));
    buf.len = size;

    return buf;
}


func arr_realloc_u32(heap: Heap@, vla: byte@[], size: usize) 
{
    realloc_heap_panic(&global_heap,&vla.data,size,sizeof_type(u32));
    vla.len = size;
}

func destroy_arr_heap_u32(heap : Heap@, vla: u32@[])
{
    free_heap(&global_heap,&vla.data);
    vla.len = 0;
}


func byte_arr_arena(arena : Arena@, size : usize) byte[]
{
    buf: byte[];
    buf.data = alloc_arena_panic(arena,size);
    buf.len = size;

    return buf;
}



struct Array
{
    // internally treated as a set of bytes
    // regardless of indexing
    buf : byte[];
    size : usize;

    element_size: usize = 1;
};

func count_array(arr: Array@) usize 
{
    return arr.size / arr.element_size;
}

func make_array(element_size: usize) Array 
{
    return Array {{NULL,0},0,element_size};
}

func clear_array(arr: Array@)
{
    arr.size = 0;
}

func destroy_array(arr: Array@)
{
    free_heap(&global_heap,&arr.buf.data);
    arr.size = 0;
}

func reserve_array_mem(arr: Array@, size : usize)
{
    realloc_heap_panic(&global_heap,&arr.buf.data,size,sizeof_type(byte));
    arr.buf.len = size;
}

func resize_array(arr : Array@, size : usize)
{
    // we have to capacity increase len
    if(arr.buf.len > size)
    {
        arr.size = size;
    }
    
    // need to ask for more memory
    else
    {
        reserve_array_mem(arr,size * 2);
        arr.size = size;
    }
}

func reserve_array(arr : Array@, size: usize)
{
    free_size := arr.buf.len - arr.size;

    // we have room to just dump this in
    if(free_size >= size)
    {
        return;
    }

    else
    {   
        // reserve double
        new_capacity := (arr.buf.len + size) * 2;
        reserve_array_mem(arr,new_capacity);
    }
}

func read_buffer(arr : const Array@, offset : usize, data: byte@, size: usize)
{
    memcpy(data,&arr.buf[offset],size);
}

func read_array(array : const Array@, idx: usize,data: byte@)
{
    offset := idx * array.element_size;
    read_buffer(array,offset,data,array.element_size);
}


func push_buffer(arr : Array@, v: const byte@,size: usize)
{
    reserve_array(arr,size);

    // actually write in the data
    memcpy(&arr.buf[arr.size],v,size);
    arr.size += size;
}

func push_array(arr: Array@, data: const byte@) 
{
    push_buffer(arr,data,arr.element_size);
}

func push_u8(arr : Array@, v : u8)
{
    push_buffer(arr,&v,sizeof(v));
}

func push_u16(arr : Array@, v : u16)
{
    push_buffer(arr,&v,sizeof(v));
}

func push_u32(arr : Array@, v : u32)
{
    push_buffer(arr,&v,sizeof(v));
}

func push_u64(arr : Array@, v : u64)
{
    push_buffer(arr,&v,sizeof(v));
}

func read_u8(arr: const Array@, offset: u64) u8
{
    v: u8;
    read_buffer(arr,offset,&v,sizeof(v));
    return v;
}

func read_u16(arr: const Array@, offset: u64) u16
{
    v: u16;
    read_buffer(arr,offset,&v,sizeof(v));
    return v;
}

func read_u32(arr: const Array@, offset: u64) u32
{
    v: u32;
    read_buffer(arr,offset,&v,sizeof(v));
    return v;
}

func read_u64(arr: const Array@, offset: u64) u64
{
    v: u64;
    read_buffer(arr,offset,&v,sizeof(v));
    return v;
}


func str_from_array(arr : Array@) string
{
    str : string;

    str.data = cast(c8@,arr.buf.data);
    str.len = arr.size;

    return str;
}

func dump_array_bytes(arr: const Array@)
{
    for(i in 0 < arr.size)
    {
        if((i & 15) == 0)
        {
            linefeed();
        }

        print("{x} ",arr.buf[i]);
    }

    linefeed();
}