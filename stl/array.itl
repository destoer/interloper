
func array_arena<T>(arena : Arena@, size : u64) T[]
{
    buf : T[];

    buf.data = cast(T@,alloc_arena_panic(arena,size * sizeof_type(T)));
    buf.len = size;

    return buf;
}


func array_heap<T>(heap : Heap@, size : u64) T[]
{
    buf : T[];

    buf.data = cast(T@,alloc_heap_panic(heap,size,sizeof_type(T)));
    buf.len = size;

    return buf;
}

func byte_array_heap(heap : Heap@, size : u64) byte[]
{
    return array_heap<byte>(heap,size);
}

func byte_array_arena(arena : Arena@, size : u64) byte[]
{
    return array_arena<byte>(arena,size);
}

func u32_array_heap(heap : Heap@, size : u64) u32[]
{
    return array_heap<u32>(heap,size);
}

func u32_array_arena(arena : Arena@, size : u64) u32[]
{
    return array_arena<u32>(arena,size);
}
