namespace std;

func byte_arr_heap(heap : Heap@, size : usize) byte[]
{
    buf: byte[];
    buf.data = alloc_heap_panic(heap,size,sizeof_type(byte));
    buf.len = size;

    return buf;
}

func arr_realloc_byte(heap: Heap@, vla: byte@[], size: usize) 
{
    realloc_heap_panic(heap,&vla.data,size,sizeof_type(byte));
    vla.len = size;
}

func destroy_arr_heap_byte(heap : Heap@, vla: byte@[])
{
    free_heap(heap,&vla.data);
    vla.len = 0;
}

func arr_heap_u32(heap : Heap@, size : usize) u32[]
{
    buf: u32[];
    buf.data = cast(u32@,alloc_heap_panic(heap,size,sizeof_type(u32)));
    buf.len = size;

    return buf;
}


func arr_realloc_u32(heap: Heap@, vla: u32@[], size: usize) 
{
    realloc_heap_panic(heap,cast(byte@@,&vla.data),size,sizeof_type(u32));
    vla.len = size;
}

func destroy_arr_heap_u32(heap : Heap@, vla: u32@[])
{
    free_heap(heap,cast(byte@@,&vla.data));
    vla.len = 0;
}


func byte_arr_arena(arena : Arena@, size : usize) byte[]
{
    buf: byte[];
    buf.data = alloc_arena_panic(arena,size);
    buf.len = size;

    return buf;
}



struct Array
{
    // internally treated as a set of bytes
    // regardless of indexing
    buf : byte[];
    size : usize;

    element_size: usize = 1;
};

func array_data(arr: Array@) byte@
{
    return arr.buf.data;
}

func count_array(arr: Array@) usize 
{
    return arr.buf.len / arr.element_size;
}

func array_buffer(arr: Array@) byte[]
{
    return arr.buf;
}

func make_array(element_size: usize) Array 
{
    // Arrays should be checked by size for validity not by pointer
    return Array {{cast(byte@,NULL),0},0,element_size};
}

func make_sized_array(element_size: usize, array_size: usize) Array
{
    array := make_array(element_size);
    resize_array(&array,array_size);
    
    return array;
}

func clear_array(arr: Array@)
{
    arr.buf.len = 0;
}

func destroy_array(arr: Array@)
{
    free_heap(&itl_context.heap,&arr.buf.data);
    arr.size = 0;
    arr.buf.len = 0;
}

func reserve_array_mem(arr: Array@, size : usize)
{
    realloc_heap_panic(&itl_context.heap,&arr.buf.data,size,sizeof_type(byte));
    arr.size = size;
}

func resize_array(arr : Array@, size : usize)
{
    bytes := size * arr.element_size;

    // we have to capacity increase len
    if(arr.size > bytes)
    {
        arr.buf.len = size;
    }
    
    // need to ask for more memory
    else
    {
        reserve_array_mem(arr,bytes * 2);
        arr.buf.len = bytes;
    }
}

func reserve_array(arr : Array@, size: usize)
{
    free_size := arr.size - arr.buf.len;

    // we have room to just dump this in
    if(free_size >= size)
    {
        return;
    }

    else
    {   
        // reserve double
        new_capacity := (arr.size + size) * 2;
        reserve_array_mem(arr,new_capacity);
    }
}

func read_buffer(arr : const Array@, offset : usize, data: byte@, size: usize)
{
    memcpy(data,&arr.buf[offset],size);
}

func array_index(array: const Array@, idx: usize) byte@
{
    offset := idx * array.element_size;
    return &array.buf[offset];
}

func array_end(array: const Array@) byte@
{
    return &array.buf[array.buf.len];
}

func push_mem(arr : Array@, v: const byte@,size: usize)
{
    reserve_array(arr,size);

    // actually write in the data
    memcpy(&arr.buf[arr.buf.len],v,size);
    arr.buf.len += size;
}

func push_buffer(arr : Array@, buffer: const byte[])
{
    push_mem(arr, buffer.data, buffer.len);
}

func push_string(arr : Array@, buffer: const string)
{
    push_mem(arr, buffer.data, buffer.len);
}

func push_array(arr: Array@, data: const byte@) 
{
    push_mem(arr,data,arr.element_size);
}

func push_u8(arr : Array@, v : u8)
{
    push_mem(arr,&v,sizeof(v));
}

func push_u16(arr : Array@, v : u16)
{
    push_mem(arr,&v,sizeof(v));
}

func push_u32(arr : Array@, v : u32)
{
    push_mem(arr,&v,sizeof(v));
}

func push_u64(arr : Array@, v : u64)
{
    push_mem(arr,&v,sizeof(v));
}

func read_buffer_u8(arr: const Array@, offset: u64) u8
{
    v: u8;
    read_buffer(arr,offset,&v,sizeof(v));
    return v;
}

func read_buffer_u16(arr: const Array@, offset: u64) u16
{
    v: u16;
    read_buffer(arr,offset,&v,sizeof(v));
    return v;
}

func read_buffer_u32(arr: const Array@, offset: u64) u32
{
    v: u32;
    read_buffer(arr,offset,&v,sizeof(v));
    return v;
}

func array_pop(arr: Array@) 
{
    arr.buf.len -= arr.element_size;
}

func array_remove_in_place(arr: Array@, data: byte@) 
{
    memcpy(data,array_index(arr,count_array(arr) - 1),arr.element_size);
    array_pop(arr);   
}

func str_from_array(arr : Array@) string
{
    return cast(c8[],array_buffer(arr));
}

func dump_array_bytes(arr: const Array@)
{
    for([v, i] in 0 < arr.buf)
    {
        if((i & 15) == 0)
        {
            linefeed();
        }

        print("{x} ",v);
    }

    linefeed();
}