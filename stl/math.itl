namespace std;

func is_even(v : u64) bool 
{
    return (v & 1) == 0;
}

func abs(v1: s64) u64
{
    if(v1 < 0)
    {
        return cast(u64,-v1);
    }

    return cast(u64,v1);
}

func min_s64(v1 : s64, v2 : s64) s64
{
    if(v1 < v2)
    {
        return v1;
    }

    return v2;
}

func min_u64(v1 : u64, v2 : u64) u64
{
    if(v1 < v2)
    {
        return v1;
    }

    return v2;
}

func min_u32(v1 : u32, v2 : u32) u32
{
    if(v1 < v2)
    {
        return v1;
    }

    return v2;
}

func max_s64(v1 : s64, v2 : s64) s64
{
    if(v1 > v2) 
    {
        return v1;
    }

    return v2;
}

func max_u64(v1 : u64, v2 : u64) u64
{
    if(v1 > v2) 
    {
        return v1;
    }

    return v2;
}

func in_range_u64(v : u64,lo : u64, hi : u64) bool
{
    return v >= lo && v <= hi;
}

func in_range_s64(v : s64,lo : s64, hi : s64) bool
{
    return v >= lo && v <= hi;
}

func clamp_s64(v1: s64, min: s64, max: s64) s64
{
    if(v1 < min) 
    {
        return min;
    }

    else if(v1 > max)
    {
        return max;
    }

    return v1;
}


/*
func log10(v: f64) u64

func pow(double: f64,pow: f64) f64
*/

struct Vec2I
{
    x: s64;
    y: s64;
}

func vec2i_add(v1: const Vec2I, v2: const Vec2I) Vec2I
{
    return Vec2I {v1.x + v2.x,v1.y + v2.y};
}

func vec2i_clamp_zero(v1: const Vec2I@,limit: const Vec2I@) Vec2I
{
    return Vec2I {
        clamp_s64(v1.x,0,limit.x),
        clamp_s64(v1.y,0,limit.y)
    };
}


struct Vec2f
{
    x : f64;
    y : f64;
}


func vec2f_aabb_intersect(p1: Vec2D,s1: Vec2D, p2: Vec2D, s2: Vec2D) bool
{
    return (p1.x < p2.x + s2.x) && (p1.x + s1.x > p2.x)
        && (p1.y < p2.y + s2.y) && (p1.y + s1.y > p2.y);
}

func vec2f_add(v1: Vec2D, v2: Vec2D) Vec2D
{
    return Vec2f {v1.x + v2.x, v1.y + v2.y};
}


func vec2f_sub(v1: Vec2D, v2: Vec2D) Vec2D
{
    return Vec2f {v1.x - v2.x, v1.y - v2.y};
}

func vec2f_scale(v1: Vec2D, scale: u32) Vec2D
{
    return Vec2f {v1.x * scale, v1.y * scale};
}


func rand_vec2f(x0: s64, x1: s64, y0: s64, y1: s64) Vec2D
{
    return Vec2f {
        std::rand_range_s64(x0,x1),
        std::rand_range_s64(y0,y1)
    };
}


func print_vec2f(tag: const string,v1: Vec2f)
{
    print("{}: {} : {}\n",tag,v1.x,v1.y);
}