namespace std;

func is_even(v : u64) bool 
{
    return (v & 1) == 0;
}

func min<T>(v1 : T, v2 : T) T
{
    if(v1 < v2)
    {
        return v1;
    }

    return v2;
}

func min_s64(v1 : s64, v2 : s64) s64
{
    return min<s64>(v1,v2);
}

func min_u64(v1 : u64, v2 : u64) u64
{
    return min<u64>(v1,v2);
}

func min_u32(v1 : u32, v2 : u32) u32
{
    return min<u32>(v1,v2);
}

func max<T>(v1 : T, v2 : T) T
{
    if(v1 > v2)
    {
        return v1;
    }

    return v2;
}

func max_s64(v1 : s64, v2 : s64) s64
{
    return max<s64>(v1,v2);
}

func max_u64(v1 : u64, v2 : u64) u64
{
    return max<u64>(v1,v2);
}

func in_range_u64(v : u64,lo : u64, hi : u64) bool
{
    return v >= lo && v <= hi;
}

func in_range_s64(v : u64,lo : u64, hi : u64) bool
{
    return v >= lo && v <= hi;
}

/*
func log10(v: f64) u64

func pow(double: f64,pow: f64) f64
*/


func clamp<T>(min: T, max: T, v: T) T
{
    if(v < min)
    {
        return min;
    }

    else if(v > max)
    {
        return max;
    }

    return v;
}

func in_range<T>(min: T, max: T, v: T) b32
{
    return v >= min && v <= max;
}

struct Vec2D
{
    x : f64;
    y : f64;
};


func vec2_aabb_intersect(p1: Vec2D,s1: Vec2D, p2: Vec2D, s2: Vec2D) bool
{
    return (p1.x < p2.x + s2.x) && (p1.x + s1.x > p2.x)
        && (p1.y < p2.y + s2.y) && (p1.y + s1.y > p2.y);
}

func vec2_add(v1: Vec2D, v2: Vec2D) Vec2D
{
    ans: Vec2D = {?};

    ans.x = v1.x + v2.x;
    ans.y = v1.y + v2.y;

    return ans;
}


func vec2_sub(v1: Vec2D, v2: Vec2D) Vec2D
{
    ans: Vec2D = {?};

    ans.x = v1.x - v2.x;
    ans.y = v1.y - v2.y;

    return ans;
}

func vec2_scale(v1: Vec2D, scale: u32) Vec2D
{
    ans: Vec2D = {?};

    ans.x = v1.x * scale;
    ans.y = v1.y * scale;

    return ans;
}


func rand_vec2(x0: s64, x1: s64, y0: s64, y1: s64) Vec2D
{
    out: Vec2D = {?};

    out.x = std::rand_range_s64(x0,x1);
    out.y = std::rand_range_s64(y0,y1);

    return out;
}


func print_vec2(tag: const string,v1: Vec2D)
{
    print("{}: {} : {}\n",tag,v1.x,v1.y);
}