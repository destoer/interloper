namespace gfx;

// TODO: move this later
import <socket>

constant X11_PREFIX : string = "X WINDOW";

// https://www.x.org/releases/X11R7.5/doc/x11proto/proto.pdf
struct OSWindow
{
    // protocol buffer
    buf : std::Array;

    sock : net::Socket;

    root_win : u32;

    // dimenstions
    screen_x : u32;
    screen_y : u32;

    win_x: u32;
    win_y: u32;

    scanline_pad : u32;

    max_req : u32;

    max_lines : u32;

    // window info
    window_id : u32;
    gfx_ctx : u32;

    window_mapped : bool;

    // request info
    seq_count : u32 = 1;

    resource_base : u32;
    resource_mask : u32;
    resource_id: u32;

    // key code
    min_keycode: u8;
    max_keycode: u8;
    key_code_to_sym: u8[255];

    big_req : bool;

    reply_callback : std::HashTable;
}

type_alias REPLY_CALLBACK_FUNC = func(win: OSWindow@, len: u32, raw_data: byte?);

struct ReplyCallback
{
    callback: REPLY_CALLBACK_FUNC;
    data: byte?;
}

constant WINDOW_CLASS_INPUT_OUTPUT : u16 = 1;

#attr(flag)
enum window_create_flag : u32
{
    background_pixmap,
    background_pixel,
    border_pixmap,
    border_pixel,
    bit_gravity,
    win_gravity,
    backing_store,
    backing_planes,
    backing_pixel,
    override_redirect,
    save_under,
    event_mask,
    do_not_propagate,
    colour_map,
    cursor,
}

#attr(flag)
enum event_flag : u32
{
    key_press,
    key_release,
    button_press,
    button_release,
    enter_window,
    leave_window,
    pointer_motion,
    pointer_motion_hint,
    button1_motion,
    button2_motion,
    button3_motion,
    button4_motion,
    button5_motion,
    button_motion,
    key_map_state,
    exposure,
    visibility_change,
    structure_notify,
    resize_redirect,
    substructure_notify,
    substructure_redirect,
    focus_change,
    property_change,
    colour_map_change,
    owner_grab_button,
}

func add_reply_callback(win: OSWindow@, seq: u32, callback: ReplyCallback@)
{
    std::hash_table_add(&win.reply_callback,&seq,callback);
}

func alloc_resource(win: OSWindow@) u32
{
    id := win.resource_id;
    win.resource_id += 1;

    return (id & win.resource_mask) | win.resource_base;
}

func pad_x11(E : u32) u32
{
    return (4 - (E & 3)) & 3;
}

func send_req(win : OSWindow@, v : const byte@, size: usize) u32
{
    log::debug(X11_PREFIX,"Send req seq: {} op: {}",win.seq_count,@v);
    net::send_raw(&win.sock,v,size);

    seq := win.seq_count;

    win.seq_count += 1;

    return seq;
}

func build_auth_packet(buf: std::Array@)
{
    // reset our working buffer
    std::clear_array(buf);

    // build initial authentication packet

    // byte order 
    if(LITTLE_ENDIAN)
    {
        std::push_u8(buf,'l');
    }

    else
    {
        std::push_u8(buf,'B');
    }


    // unused
    std::push_u8(buf,0x0);

    // version 11.0
    std::push_u16(buf,11);
    std::push_u16(buf,0);

    // no authentication no strings
    std::push_u32(buf,0);

    // pad
    std::push_u16(buf,0);
}

func read_x11_reply(win: OSWindow@, size : u32)
{
    // get our specified bytes
    net::recv_clear_array(&win.sock,&win.buf,size);
}


#attr(no_reorder)
struct XQueryTree
{
    opcode : u8 = 15;
    pad1 : u8;
    len: u16 = 2;
    window: u32;
}


func query_tree(win: OSWindow@, root : u32)
{
    query : XQueryTree;
    query.window = root;

    send_req(&win.sock,&query,sizeof_data(XQueryTree));
}


#attr(no_reorder)
struct XSetupInfo
{
    release : u32;
    resource_id_base : u32;
    resource_id_mask : u32;
    motion_buffer_size : u32;
    vendor_size : u16;
    max_req_len : u16;
    screen_count : u8;
    format_size : u8;
    image_order  : u8;
    bitmap_order : u8;
    bitmap_scanline_fmt_unit : u8;
    bitmap_format_scanline_pad : u8;
    min_keycode : u8;
    max_keycode : u8;
    pad1 : u32;
};

#attr(no_reorder)
struct XFormat
{
    depth : u8;
    bpp : u8;
    scanline_pad : u8;
    pad1 : u8[5];
};

#attr(no_reorder)
struct XScreen
{
    root : u32;
    colour_map : u32;
    white : u32;
    black : u32;
    input_mask : u32;
    width : u16;
    height : u16;
    width_m : u16;
    height_m : u16;
    min_map : u16;
    max_map : u16;
    root_visual : u32;
    backing_store : u8;
    save_under : u8;
    root_depth : u8;
    depth_count : u8;
}

#attr(no_reorder)
struct XDepth
{
    depth : u8;
    pad1 : u8;
    vis_size : u16;
    pad2 : u32;
}

#attr(no_reorder)
struct XVisualType
{
    id : u32;
    class : u8;
    bpr: u8;
    map_entires : u16;
    red_mask : u32;
    green_mask : u32;
    blue_mask : u32;
    pad1 : u32;
}

func read_setup_info(win: OSWindow@)
{
    buf := &win.buf;

    net::recv_ignore(&win.sock,1);

    // read in our first batch of data
    read_x11_reply(win,6);

    log::debug(X11_PREFIX,"version {}.{}",std::read_buffer_u16(buf,0),std::read_buffer_u16(buf,2));

    len : u32 = std::read_buffer_u16(buf,4) * 4;

    log::debug(X11_PREFIX,"len {}",len);

    info: XSetupInfo = {?};
    net::recv_raw(&win.sock,&info,sizeof_data(XSetupInfo));

    log::debug(X11_PREFIX,"big endian bitmap order: {}",cast(bool,info.bitmap_order));

    read_x11_reply(win,info.vendor_size);
    log::debug(X11_PREFIX,"vendor {}",std::str_from_array(buf),info.vendor_size);

    net::recv_ignore(&win.sock,pad_x11(info.vendor_size));

    log::debug(X11_PREFIX,"resource {b} : {b}\n",info.resource_id_base,info.resource_id_mask);

    log::debug(X11_PREFIX,"max req len: {}",info.max_req_len * 4);

    win.min_keycode = info.min_keycode;
    win.max_keycode = info.max_keycode;

    log::debug(X11_PREFIX,"keycode: {} {}",win.min_keycode, win.max_keycode);

    win.resource_base = info.resource_id_base;
    win.resource_mask = info.resource_id_mask;

    win.max_req = info.max_req_len * 4;

    for(i in 0 < info.format_size)
    {
        fmt: XFormat = {?};
        net::recv_raw(&win.sock,&fmt,sizeof_data(XFormat));
    
        log::trace(X11_PREFIX,"format {}",i);
        log::trace(X11_PREFIX,"depth {}",fmt.depth);
        log::trace(X11_PREFIX,"bits per pixel {}",fmt.bpp);
        log::trace(X11_PREFIX,"scanline pad {}\n\n",fmt.scanline_pad);
    }

    for(i in 0 < info.screen_count)
    {
        screen : XScreen = {?};
        net::recv_raw(&win.sock,&screen,sizeof_data(XScreen));
        log::debug(X11_PREFIX,"screen {}",i);
        log::debug(X11_PREFIX,"root {}",screen.root);
        log::debug(X11_PREFIX,"measurements {}mm : {}mm",screen.width_m,screen.height_m);
        log::debug(X11_PREFIX,"dimensions {} : {}\n",screen.width, screen.height);

        // default this to first screen
        if(i == 0)
        {
            win.screen_x = screen.width;
            win.screen_y = screen.height;
            win.root_win = screen.root;
        }

        // read out each depth
        for(d in 0 < screen.depth_count)
        {
            depth: XDepth = {?};
            net::recv_raw(&win.sock,&depth,sizeof_data(XDepth));

            log::trace(X11_PREFIX,"depth {}",depth.depth);

            for(v in 0 < depth.vis_size)
            {
                visual_type: XVisualType = {?};
                net::recv_raw(&win.sock,&visual_type,sizeof_data(XVisualType));
                
                log::trace(X11_PREFIX,"id {}",visual_type.id);
                log::trace(X11_PREFIX,"class {}",visual_type.class);
                log::trace(X11_PREFIX,"bpr {}\n",visual_type.bpr); 
            }
        }
    }

}

func authenticate(win: OSWindow@) bool
{
    buf := &win.buf;

    build_auth_packet(buf);

    // actually send the packet
    net::send_array(&win.sock,buf);

    // recv back our data
    rc: u8;
    if(net::recv_raw(&win.sock,&rc,sizeof(rc)) < 0) 
    {
        return false;
    }

    constant AUTH_SUCCESS : u32 = 1;

    switch(rc)
    {
        case AUTH_SUCCESS:
        {
            log::info(X11_PREFIX,"connected to x server:");
            read_setup_info(win);
        }

        default:
        {
            return true;
        }
    }

    return false;
}


func x11_req_len(len : u64) u16
{
    return cast(u16,len / 4);
}

#attr(no_reorder)
struct XMapWindow
{
    code : u8 = 8;
    pad1 : u8 = 0;
    len : u16 = 2;
    window : u32;
}


func map_window(win : OSWindow@, id : u32)
{
    map : XMapWindow;
    map.window = id;

    send_req(win,&map,sizeof_data(XMapWindow));
}

#attr(no_reorder)
struct XDestroyWindow
{
    code : u8 = 4;
    pad1: u8 = 0;
    len : u16 = 2;
    window : u32;
}

// TODO: we need namspacing 
func x11_destroy_window(win : OSWindow@, id : u32)
{
    destroy : XDestroyWindow;
    destroy.window = id;

    send_req(win,&destroy,sizeof_data(XDestroyWindow));
}

enum x_reply_type : u8
{
    error = 0,
    reply = 1,
    key_press = 2,
    key_release = 3,
    map_notify = 19,
    configure_notify = 22,
}

func process_reply(win : OSWindow@)
{
    buf := &win.buf;

    seq: u32 = std::read_buffer_u16(buf,2);
    len := std::read_buffer_u32(buf,4) * 4;

    callback_opt := std::hash_table_lookup(&win.reply_callback,&seq);

    if(!callback_opt)
    {
        // just burn the reply
        net::recv_ignore(&win.sock,len);
        return;
    }

    reply_callback := cast(ReplyCallback@,callback_opt);
    reply_callback.callback(win,len,reply_callback.data);

    std::hash_table_remove(&win.reply_callback,&seq);
}

#attr(no_reorder)
struct XError
{
    error: u8 = 0;
    code: u8;
    seq_number: u16;
    data: u32;
    minor_opcode: u16;
    major_opcode: u8;
    pad1: u8[21];
}

func process_error(win : OSWindow@)
{
    error: XError = {?};
    std::read_buffer(&win.buf,0,&error,sizeof_data(XError));

    log::error(X11_PREFIX,"Error: {}",error.code);
    log::error(X11_PREFIX,"Seq: {}",error.seq_number);
    log::error(X11_PREFIX,"Data: {}",error.data);
    log::error(X11_PREFIX,"Opcode: {} {}\n",error.major_opcode,error.minor_opcode);
}


#attr(no_reorder)
struct XPutImage
{
    opcode: u8 = 72;
    format: u8 = 2;
    len: u16 = 6;
    drawable: u32;
    gc: u32;
    width: u16;
    height: u16;
    dst_x: s16;
    dst_y: s16;
    left_pad : u8;
    depth: u8;
    pad1: u16;
}

#attr(no_reorder)
struct XPutImageBig
{
    opcode: u8 = 72;
    format: u8 = 2;
    extend: u16 = 0;
    len: u32 = 7;
    drawable: u32;
    gc: u32;
    width: u16;
    height: u16;
    dst_x: s16;
    dst_y: s16;
    left_pad : u8;
    depth: u8;
    pad2: u16;
}


func draw_lines(win: OSWindow@, ptr: const u32@, start_y: u32,lines: u32, stride: u32)
{
    // calc data size
    pixel_size := cast(u32,lines * stride * sizeof_type(u32));

    pad := pad_x11(pixel_size);

    bytes := (pixel_size + pad) / 4;

    // we can use the ext send big image req
    if(win.big_req)
    {
        // send image req
        put_image: XPutImageBig;

        put_image.gc = win.gfx_ctx;
        put_image.depth = 24;

        put_image.dst_y = cast(s16,start_y);

        put_image.width = cast(u16,stride);
        put_image.height = cast(u16,lines);

        put_image.drawable = win.window_id;
    
        put_image.len += bytes;
        
        //std::print("len: {}\n",put_image.len);

        send_req(win,&put_image,sizeof_data(XPutImageBig));
    }

    // small req
    else
    {
        put_image: XPutImage;

        put_image.gc = win.gfx_ctx;
        put_image.depth = 24;

        put_image.dst_y = cast(s16,start_y);

        put_image.width = cast(u16,stride);
        put_image.height = cast(u16,lines);

        put_image.drawable = win.window_id;
    
        put_image.len += cast(u16,bytes);
        
        send_req(win,&put_image,sizeof_data(XPutImage));
    }

    // send pending data
    net::send_raw(&win.sock,ptr,pixel_size);
    
    // send pad 
    // NOTE: uses screen data just because its easy
    net::send_raw(&win.sock,ptr,pad);

    //std::print("sent {}\n",pixel_size + pad);
}

func os_draw_window(win: OSWindow@, screen: const u32[], width : u32, height : u32)
{
    lines := win.max_lines;
    ptr := screen.data;

    offset := width * lines;

    for(y : u32 = 0; y < height; y += lines)
    {
        to_draw := std::min_u32(lines,height - y);

        draw_lines(win,ptr,y,to_draw,width);

        ptr += offset;
    }
}



#attr(no_reorder)
struct XCreateNotify
{
    code : u8;
    pad1 : u8;
    seq : u16;
    parent : u32;
    window : u32;
    x : s16;
    y : s16;
    width : u16;
    height : u16;
    border_width : u16;
    override_redirect : u8;
    pad2 : u8[9];
}

#attr(no_reorder)
struct XConfigureNotify
{
    code : u8;
    pad1 : u8;
    seq : u16;
    event: u32;
    window : u32;
    above_sibling: u32;
    x : s16;
    y : s16;
    width : u16;
    height : u16;
    border_width : u16;
    override_redirect : u8;
    pad2 : u8[5];
}

// todo: can we assume lat1 is the first keyset?
func x_key_code_to_sym(win: OSWindow@, keycode: u8) u8
{
    return win.key_code_to_sym[keycode];
}

func x_key_event(std_win: Window@, keycode: u8, down: bool)
{
    //std::print("key event {x} : {}\n",keycode,down);

    input::set_input(&std_win.input,keycode,down);
}


func os_process_events(std_win: Window@) bool
{
    win := &std_win.os_win;

    if(!net::socket_valid(&win.sock))
    {
        std_win.quit = true;
        return false;
    }

    rc : s32 = -1;

    // while socket has data or we are waiting for specific notificaiton
    while(net::socket_has_data(&win.sock))
    {
        buf := &win.buf;

        // TODO: we probably want to peek this...
        net::recv_clear_array(&win.sock,buf,32);

        type: x_reply_type;
        std::read_buffer(buf,0,&type,sizeof_data(x_reply_type));

        rc = cast(s32,type);

        switch(type)
        {
            case x_reply_type::error:
            {
                process_error(win);

                return true;
            }

            case x_reply_type::reply:
            {
                process_reply(win);
            }

            case x_reply_type::key_press:
            {
                key := std::read_buffer_u8(buf,1);

                x_key_event(std_win,key,true);
            }

            // TODO: why are the key release events not allways firing?
            case x_reply_type::key_release:
            {
                key := std::read_buffer_u8(buf,1);

                x_key_event(std_win,key,false);         
            }

            case x_reply_type::configure_notify:
            {
                config: XConfigureNotify = {?};
                std::read_buffer(buf,0,&config,sizeof_data(XConfigureNotify));

                os_window_resized(win,config.width,config.height);
                window_resized(std_win,win.win_x,win.win_y);
            }
        
            case x_reply_type::map_notify:
            {
                win.window_mapped = true;
            }

            default:
            {
                log::debug(X11_PREFIX,"Notify: {}",cast(u8,type));
            }
        }
    }

    return false;
}


#attr(no_reorder)
struct XCreateWindow
{
    opcode : u8 = 1;
    depth : u8;
    req_len : u16 = 8;
    window : u32;
    parent : u32;
    x : s16;
    y : s16;
    width : u16;
    height : u16;
    border_width : u16;
    class : u16;
    visual_id : u32;
    value_mask : u32;
}

func create_window(win : OSWindow@, x : u32, y : u32)
{
    win.reply_callback = std::make_hash_table(u32.size,ReplyCallback.size,&std::hash_u32);

    // allocate a an id and save it
    win.window_id = alloc_resource(win);

    log::debug(X11_PREFIX,"window id: {} {}",win.window_id,win.root_win);

    // build end list
    buf := &win.buf;
    std::clear_array(buf);

    // first the events we want to listen for
    events : u32 = event_flag::structure_notify;
    std::push_u32(buf,events);

    // attempt to get a rgba window
    win_req : XCreateWindow;
    win_req.req_len += x11_req_len(buf.size);

    // rgb888
    win_req.depth = 24;

    win_req.window = win.window_id;

    win_req.class = WINDOW_CLASS_INPUT_OUTPUT;

    // set root as parent
    win_req.parent = win.root_win;

    win_req.x = cast(s16,win.screen_x / 2);
    win_req.y = cast(s16,win.screen_y / 2);

    
    win_req.width = cast(u16,x);
    win_req.height = cast(u16,y);

    // TODO: dont know how large this should be
    // but we want visual confirmation
    win_req.border_width = 20;

    // mark what window settings we want to change
    win_req.value_mask |= window_create_flag::event_mask;
    
    // send the main request
    send_req(win,&win_req,sizeof_data(XCreateWindow));

    // send end list
    net::send_array(&win.sock,buf);

    // now map in the window
    map_window(win,win.window_id);
}

#attr(no_reorder)
struct XCreateGC
{
    opcode: u8 = 55;
    pad1: u8;
    len: u16 = 4;
    cid: u32;
    drawable: u32;
    value_mask: u32;
}

func create_gfx_ctx(win: OSWindow@)
{
    // reserve id for gfx ctx
    win.gfx_ctx = alloc_resource(win);

    gc: XCreateGC;

    gc.cid = win.gfx_ctx;
    gc.drawable = win.window_id;

    send_req(win,&gc,sizeof_data(XCreateGC));
}


func update_max_lines(win: OSWindow@)
{
    // what is the max number of lines we can push in one go?
    win.max_lines = win.max_req / (win.win_x * sizeof_type(u32));

    log::debug(X11_PREFIX,"max lines: {}",win.max_lines);
}

func os_window_resized(win: OSWindow@,x : u32, y: u32)
{
    win.win_x = x;
    win.win_y = y;

    update_max_lines(win);

    // should be able to push atleast one scanline in a go
    std::assert(win.max_lines >= 1);
}


constant X11_CHANGE_PROPERTY : u8 = 0;

#attr(no_reorder)
struct XChangeProperty
{
    opcode: u8 = 18;
    mode: u8 = X11_CHANGE_PROPERTY;
    len: u16 = 6;
    window: u32;
    property: u32;
    type: u32;
    format: u8;
    pad1: u8[3];
    data_len: u32;
};



constant XA_WM_ICON_NAME: u32 = 37;
constant XA_WM_NAME: u32 = 39;
constant STRING_TYPE : u32 = 31;

func x11_set_str_property(win: OSWindow@, property: u32,str: const string)
{
    prop : XChangeProperty;
    prop.window = win.window_id;
    prop.property = property;
    prop.type = STRING_TYPE;
    prop.format = 8;

    prop.data_len = cast(u32,str.len);

    pad := pad_x11(prop.data_len);
    bytes := x11_req_len(pad + str.len);
    prop.len += bytes;

    send_req(win,&prop,sizeof_data(XChangeProperty));

    net::send_str(&win.sock,str);

    // just send struct as padding
    net::send_raw(&win.sock,&prop,pad);
}

func os_set_window_name(win: OSWindow@, str: const string)
{
    x11_set_str_property(win,XA_WM_NAME,str);
    x11_set_str_property(win,XA_WM_ICON_NAME,str);

    log::debug(X11_PREFIX,"change window name: {}",str);
}

func wait_for_reply(std_win: Window@, done: bool@)
{
    while(!@done)
    {
        if(process_events(std_win))
        {
            std::crash_and_burn("Died while waiting for reply");
        }       
    }
}

#attr(no_reorder)
struct XQueryExtension
{
    opcode: u8 = 98;
    pad1: u8;
    len: u16 = 2;
    str_len: u16;
    pad2: u16;
}

struct ExtenstionQuery
{
    replied: bool;
    opcode: u8;
    enabled: bool;
}

func ext_query_callback(win: OSWindow@, len: u32, data: byte?)
{
    ext_query := cast(ExtenstionQuery@,data);
    ext_query.replied = true;
    ext_query.enabled = cast(bool,std::read_buffer_u8(&win.buf,8));
    ext_query.opcode = std::read_buffer_u8(&win.buf,9);
}

func query_extenstion(std_win: Window@, str: const string) ExtenstionQuery
{
    win := &std_win.os_win;

    query : XQueryExtension;

    query.str_len = cast(u16,str.len);

    pad := pad_x11(query.str_len);
    bytes := x11_req_len(pad + str.len);
    query.len += bytes;

    ext_query_seq := send_req(win,&query,sizeof_data(XQueryExtension));
    net::send_str(&win.sock,str);

    // just send struct as padding
    net::send_raw(&win.sock,&query,pad);


    query_reply: ExtenstionQuery;
    callback: ReplyCallback = {&ext_query_callback,&query_reply};
    add_reply_callback(win,ext_query_seq,&callback);

    wait_for_reply(std_win,&query_reply.replied);

    return query_reply;
}

#attr(no_reorder)
struct XBigReqEnable
{
    opcode: u8;
    req_op: u8 = 0;
    len: u16 = 1;
}

struct XBigReqReply
{
    replied: bool;
    max_req: u32;
}

func enable_big_req_callback(win: OSWindow@, len: u32, data: byte?)
{
    reply := cast(XBigReqReply@,data);

    reply.replied = true;
    reply.max_req = std::read_buffer_u32(&win.buf,8) * 4;
}

func enable_big_req(std_win: Window@)
{
    win := &std_win.os_win;

    // send ext query
    ext_query := query_extenstion(std_win,"BIG-REQUESTS");

    win.big_req = ext_query.enabled;

    if(!win.big_req)
    {
        return;
    }

    enable: XBigReqEnable;
    enable.opcode = ext_query.opcode;

    // send the opcode
    big_req_seq := send_req(win,&enable,sizeof_data(XBigReqEnable));

    query_reply: XBigReqReply;
    callback: ReplyCallback = {&enable_big_req_callback,&query_reply};
    add_reply_callback(win,big_req_seq,&callback);

    wait_for_reply(std_win,&query_reply.replied);
    win.max_req = query_reply.max_req;

    update_max_lines(win);
}

#attr(no_reorder)
struct XGrabKey
{
    opcode: u8 = 33;
    owner_events: u8;
    req_len: u16 = 4;
    window: u32;
    mask: u16;
    keycode: u8;
    pointer_mode: u8;
    keyboard_mode: u8;
    pad1: u8[3];
}

func grab_keyboard(win: OSWindow@)
{
    grab: XGrabKey;

    grab.window = win.window_id;
    grab.keyboard_mode = 1;
    grab.pointer_mode = 1;

    // grab any key
    grab.mask = 0x8000;

    send_req(win,&grab,sizeof_data(XGrabKey));
}

#attr(no_reorder)
struct XGetKeyboardMapping
{
    opcode: u8 = 101;
    pad1: u8;
    len: u16 = 2;
    first_keycode: u8;
    count: u8;
    pad2: u16;
}

func keyboard_mapping_callback(win: OSWindow@, len: u32, data: byte?)
{
    replied := cast(bool@,data);
    @replied = true;

    log::debug(X11_PREFIX,"Key mapping setup");
    n := std::read_buffer_u8(&win.buf,1);

    read_x11_reply(win,len);
    
    cur : u32 = 0;
    offset := n * 4;

    for(i in win.min_keycode < win.max_keycode)
    {
        win.key_code_to_sym[i] = std::read_buffer_u8(&win.buf,cur);
        cur += offset;
    }  
}

func get_keyboard_mapping(std_win: Window@)
{
    win := &std_win.os_win;

    map: XGetKeyboardMapping;
    map.first_keycode = win.min_keycode;
    map.count = win.max_keycode - map.first_keycode;

    get_key_map_seq := send_req(win,&map,sizeof_data(XGetKeyboardMapping));

    replied: bool;

    callback: ReplyCallback = {&keyboard_mapping_callback,&replied};
    add_reply_callback(win,get_key_map_seq,&callback);

    wait_for_reply(std_win,&replied);
}

func os_open_window(std_win: Window@,str : const string, x : u32, y : u32)
{
    win := &std_win.os_win;

    win.win_x = x;
    win.win_y = y;

    socket_name := "/tmp/.X11-unix/X0";
    log::debug(X11_PREFIX,"connecting to {}",socket_name);

    // open connection to x server
    win.sock = std::connect_unix_domain(socket_name);

    if(!net::socket_valid(&win.sock))
    {
        std::crash_and_burn("window socket {} not valid",socket_name);
    }

    if(authenticate(win))
    {
        std::crash_and_burn("could not authenticate to server");
    }

    create_window(win,x,y);

    create_gfx_ctx(win);

    log::info(X11_PREFIX,"waiting for window mapping");

    // wait for window to become mapped
    while(!win.window_mapped)
    {
        if(process_events(std_win))
        {
            std::crash_and_burn("could not create window");
        }
    }

    os_set_window_name(win,str);

    // try to enable the big request exenstion
    enable_big_req(std_win);

    get_keyboard_mapping(std_win);

    grab_keyboard(win);
}

func os_destroy_window(win : OSWindow@)
{
    // destroy all resources
    x11_destroy_window(win,win.window_id);

    // close down our socket and free our working buffer
    std::destroy_array(&win.buf);
    net::close_sock(&win.sock);
}
