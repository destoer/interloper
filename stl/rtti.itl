namespace rtti;

constant RUNTIME_SIZE : u32 = 0xfffffff0;

struct BuiltinTypeData
{
    is_integer : bool;

    is_signed : bool;

    // how many bytes is the type
    size : u32;

    // range of values allowed
    min : u64;
    max : u64;
}

enum type_class
{
    builtin_t,
    pointer_t,
    array_t,
    struct_t,
    enum_t,
}

enum builtin_type : BuiltinTypeData
{
    u8_t = {true,false,1,0,0xff},
    u16_t = {true, false ,2, 0, 0xffff},
    u32_t = {true, false ,4, 0, 0xffffffff},
    u64_t = {true, false ,8,  0, 0xffffffff_ffffffff},

    s8_t = {true, true, 1, cast(u64,-(0xff / 2)), (0xff / 2)},
    s16_t = {true, true ,2,  cast(u64,-(0xffff / 2)), (0xffff / 2)},
    s32_t = {true, true ,4,  cast(u64,-(0xffffffff / 2)), (0xffffffff / 2)},
    s64_t = {true, true ,8,  cast(u64,-(0xffffffff_ffffffff / 2)), 0xffffffff_ffffffff / 2},

    c8_t = {true, false, 1, 0, 0xff},

    byte_t = {true, false, 1, 0, 0xff},

    bool_t = {false, false ,1,  0, 1},

    f64_t = {false,false,8,0,0xffffffff_ffffffff},

    // TODO: i think we need usize
    null_t = {false,false, 8,0,0},
}

// NOTE: these structs are directly interfaced with by the compiler
// editing cause rtti to fail to compile

struct Type
{
    kind : const type_class;
}

struct BuiltinType (type : const Type)
{
    builtin : const builtin_type;
}

struct PointerType (type : const Type)
{
    contained_type : const Type@;
}

struct ArrayType (type : const Type)
{
    contained_type : const Type@;

    // RUNTIME_SIZE or current size!
    size : const u32;

    // size of indexing array
    sub_size : const u32;
}

struct StructType (type : const Type)
{
    struct_idx : const u32;
}

struct EnumType (type : const Type)
{
    enum_idx : const u32;
}

struct Any
{
    // NOTE: for types < GPR_SIZE they are written directly into the pointer
    // use the helper functions to get at the data
    data : const byte@;

    type : const Type@;
}

// struct for generic vla
struct Vla
{
    data : const byte@;
    len : u64;
}

func is_builtin(type: const Type@) bool
{
    return type.kind == type_class::builtin_t;
}

func is_builtin_type(type: const Type@, expected: builtin_type) bool
{
    if(!is_builtin(type))
    {
        return false;
    }

    return cast_builtin(type) == expected;
}

func cast_builtin(type: const Type@) builtin_type
{
    underlying := cast(BuiltinType@,type);
    return underlying.builtin;
}

func deref_pointer(type: const Type@) const Type@
{
    pointer_type := cast(const PointerType@,type);

    return pointer_type.contained_type;
}

func is_runtime_size(size : u32) bool
{
    return size == RUNTIME_SIZE;
}

func is_string(type: const Type@) bool 
{
    array_type := cast(const rtti::ArrayType@,type);
    contained_type := array_type.contained_type;
    return contained_type.kind == rtti::type_class::builtin_t && rtti::cast_builtin(contained_type) == rtti::builtin_type::c8_t;
}

func is_pointer(type : const Type@) bool
{
    return type.kind == type_class::pointer_t;
}

func is_signed(type : const Type@) bool
{
    if(type.kind != type_class::builtin_t)
    {
        return false;
    }

    idx := cast(u32,cast_builtin(type));

    return std::in_range_u64(idx,cast(u32,builtin_type::s8_t),cast(u32,builtin_type::s64_t));
}

func is_array(type : const Type@) bool
{
    return type.kind == type_class::array_t;
}

func int_from_any(any : const Any) u64
{
    return cast(u64,any.data);
}

func float_from_any(any : const Any) f64
{
    v := cast(u64,any.data);
    out: f64;
    std::memcpy(&out,&v,sizeof(out));
    return out;
}

func bool_from_any(any : const Any) bool
{
    type : builtin_type;

    v := int_from_any(any);

    return v == 1;
}

func char_from_any(any : const Any) c8
{
    v := int_from_any(any);

    return cast(c8,v);
}